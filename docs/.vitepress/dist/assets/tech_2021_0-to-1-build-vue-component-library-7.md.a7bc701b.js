import{_ as a,B as s,o as n,c as l,G as t,Q as p}from"./chunks/framework.1fee3549.js";const g=JSON.parse('{"title":"从0到1搭建Vue组件库07：给组件库项目增加单元测试","description":"","frontmatter":{},"headers":[],"relativePath":"tech/2021/0-to-1-build-vue-component-library-7.md","filePath":"tech/2021/0-to-1-build-vue-component-library-7.md"}'),o={name:"tech/2021/0-to-1-build-vue-component-library-7.md"},c=p(`<h1 id="从0到1搭建vue组件库07-给组件库项目增加单元测试" tabindex="-1">从0到1搭建Vue组件库07：给组件库项目增加单元测试 <a class="header-anchor" href="#从0到1搭建vue组件库07-给组件库项目增加单元测试" aria-label="Permalink to &quot;从0到1搭建Vue组件库07：给组件库项目增加单元测试&quot;">​</a></h1><p><img src="https://user-images.githubusercontent.com/9566362/201511144-b05b690e-7294-4d9f-ad8c-d5c707fc43fd.png" alt="image"></p><p><a href="https://gitee.com/devui/vue-devui" target="_blank" rel="noreferrer">Vue DevUI</a>是一个通过开源社区孵化的 Vue3 开源组件库，这意味着从一开始<code>Vue DevUI</code>就不是靠个人维护的项目，而是通过社区共同的力量进行持续演进的。</p><p>由于是新项目，在技术选型时，我们都是用的最新的技术：</p><ul><li>用<code>Vite</code>搭建基础工程和构建打包</li><li>用最新的<code>Vue3</code>语法编写组件</li><li>用<code>TypeScript</code>给代码增加类型系统</li><li>用<code>JSX</code>语法编写Vue组件，确保最大的灵活性</li><li>用<code>VitePress</code>搭建组件库的文档</li></ul><p>刚开始我们只是搭了一个架子，写了一些组件，加了<code>commit</code>检查，工程化方面的东西还很不完善，没有单元测试、没有<code>eslint</code>、没有<code>cli</code>工具。</p><p>社区的小伙伴 <a href="https://gitee.com/brenner8023" target="_blank" rel="noreferrer">Brenner</a> 发现了这个问题，作为一个开源项目，怎么能没有单元测试呢？后面正式发布了，别人一看，单元测试都没有，还敢用吗？</p><p>所以<code>Brenner</code>同学在2021年6月13日，正式提交了一个<a href="https://gitee.com/devui/vue-devui/pulls/4" target="_blank" rel="noreferrer">PR</a>，给<code>Vue DevUI</code>增加了基于<a href="https://jestjs.io/zh-Hans/docs/getting-started" target="_blank" rel="noreferrer">Jest</a>和<a href="https://next.vue-test-utils.vuejs.org/guide/" target="_blank" rel="noreferrer">Vue Test Utils</a>的单元测试环境。</p><p><a href="https://gitee.com/brenner8023" target="_blank" rel="noreferrer">Brenner</a> 是我们的早期贡献者，<code>vue devui</code>于<code>2021.5.1</code>正式在掘金招募<code>contributor</code>。</p><p><a href="https://juejin.cn/post/6956988395016945701" target="_blank" rel="noreferrer">让我们一起建设 Vue DevUI 项目吧！🥳 </a></p><p>当时其实响应的人不算多，直到<a href="https://gitee.com/brenner8023" target="_blank" rel="noreferrer">Brenner</a>的出现，<code>Brenner</code>同学在6月13日悄悄地给<code>vue devui</code>提交了一个pr：</p><p><a href="https://gitee.com/devui/vue-devui/pulls/4" target="_blank" rel="noreferrer">https://gitee.com/devui/vue-devui/pulls/4</a></p><p>之后几乎每隔一个星期都有提交pr，完善了单元测试、eslint等代码检查工具，并提交了好几个组件，比如：</p><ol><li>Radio</li><li>Checkbox</li><li>Switch</li><li>TagInput</li><li>Input</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1d43d78755d4c7e85ea066316bebc3d~tplv-k3u1fbpfcp-watermark.image?" alt="图片.png"></p><p><code>Brenner</code>同学给了我很大的信心，虽然现在<code>Brenner</code>同学已经退居幕后，但正是因为他的早期的持续贡献，让<code>vue devui</code>有个重大突破。</p><p>2个月之后的8月3日，vue devui的组件数量达到10个，我们在掘金同步了这个消息。</p><p><a href="https://juejin.cn/post/6992233443585163300" target="_blank" rel="noreferrer">Vue DevUI 已经有10个组件成员啦～🥳😋 </a></p><p>之后vue devui开始活跃，涌现了大量的田主和contributor。</p><p>让我们一起来看看，如何给Vue3组件库搭建单元测试环境，并给Vue组件增加单元测试。</p><h2 id="_1-引入-jest" tabindex="-1">1 引入 Jest <a class="header-anchor" href="#_1-引入-jest" aria-label="Permalink to &quot;1 引入 Jest&quot;">​</a></h2><h3 id="_1-1-安装-jest" tabindex="-1">1.1 安装 Jest <a class="header-anchor" href="#_1-1-安装-jest" aria-label="Permalink to &quot;1.1 安装 Jest&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yarn add -D jest @types/jest</span></span></code></pre></div><h3 id="_1-2-增加脚本命令" tabindex="-1">1.2 增加脚本命令 <a class="header-anchor" href="#_1-2-增加脚本命令" aria-label="Permalink to &quot;1.2 增加脚本命令&quot;">​</a></h3><p>package.json</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#babed8;">  &quot;dev&quot;: &quot;vite&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  &quot;build&quot;: &quot;vue-tsc --noEmit &amp;&amp; vite build&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  &quot;serve&quot;: &quot;vite preview&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  &quot;test&quot;: &quot;jest&quot; // 新增</span></span>
<span class="line"><span style="color:#babed8;">},</span></span></code></pre></div><h3 id="_1-3-编写测试用例" tabindex="-1">1.3 编写测试用例 <a class="header-anchor" href="#_1-3-编写测试用例" aria-label="Permalink to &quot;1.3 编写测试用例&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">// Step 1: 定义一个测试套 Test Suite</span></span>
<span class="line"><span style="color:#babed8;">describe(&#39;tree&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">  // Step 2: 定义一个单元测试 Test</span></span>
<span class="line"><span style="color:#babed8;">  // i think &#39;tree should render correctly&#39;</span></span>
<span class="line"><span style="color:#babed8;">  it(&#39;tree should render correctly&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">    // Step 3: 期望（expect）tree组件的class里面包含（toContain）&#39;devui-tree&#39;</span></span>
<span class="line"><span style="color:#babed8;">    expect(wrapper.classes()).toContain(&#39;devui-tree&#39;)</span></span>
<span class="line"><span style="color:#babed8;">    </span></span>
<span class="line"><span style="color:#babed8;">    // 期望（expect）tree组件的子元素数量为（toBe）6</span></span>
<span class="line"><span style="color:#babed8;">    expect(wrapper.element.childElementCount).toBe(6)</span></span>
<span class="line"><span style="color:#babed8;">  })</span></span>
<span class="line"><span style="color:#babed8;">})</span></span></code></pre></div><h3 id="_1-4-编写第一个单元测试" tabindex="-1">1.4 编写第一个单元测试 <a class="header-anchor" href="#_1-4-编写第一个单元测试" aria-label="Permalink to &quot;1.4 编写第一个单元测试&quot;">​</a></h3><p><code>devui/tree/__tests__/tree.spec.ts</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">// Step 1: 定义一个测试套 Test Suite</span></span>
<span class="line"><span style="color:#babed8;">describe(&#39;tree&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">  // Step 2: 定义一个单元测试 Test</span></span>
<span class="line"><span style="color:#babed8;">  // i think &#39;tree should render correctly&#39;</span></span>
<span class="line"><span style="color:#babed8;">  it(&#39;should render correctly&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">    // Step 3: 编写测试断言，期望（expect）1等于1</span></span>
<span class="line"><span style="color:#babed8;">    expect(1).toEqual(1)</span></span>
<span class="line"><span style="color:#babed8;">  })</span></span>
<span class="line"><span style="color:#babed8;">})</span></span></code></pre></div><h3 id="_1-5-执行-test-命令" tabindex="-1">1.5 执行 test 命令 <a class="header-anchor" href="#_1-5-执行-test-命令" aria-label="Permalink to &quot;1.5 执行 test 命令&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yarn test</span></span></code></pre></div><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82812dd3714e4b698508807785bddb18~tplv-k3u1fbpfcp-watermark.image?" alt="图片.png"></p><h2 id="_2-测试组件" tabindex="-1">2 测试组件 <a class="header-anchor" href="#_2-测试组件" aria-label="Permalink to &quot;2 测试组件&quot;">​</a></h2><h3 id="_2-1-安装-vue-test-utils" tabindex="-1">2.1 安装<code>@vue/test-utils</code> <a class="header-anchor" href="#_2-1-安装-vue-test-utils" aria-label="Permalink to &quot;2.1 安装\`@vue/test-utils\`&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yarn add -D @vue/test-utils</span></span></code></pre></div><h3 id="_2-2-编写组件测试代码" tabindex="-1">2.2 编写组件测试代码 <a class="header-anchor" href="#_2-2-编写组件测试代码" aria-label="Permalink to &quot;2.2 编写组件测试代码&quot;">​</a></h3><p><code>devui/tree/__tests__/tree.spec.ts</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import { mount } from &#39;@vue/test-utils&#39;</span></span>
<span class="line"><span style="color:#babed8;">import DTree from &#39;../src/tree&#39;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">describe(&#39;tree&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">  it(&#39;should render correctly&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">    const wrapper = mount({</span></span>
<span class="line"><span style="color:#babed8;">      components: { DTree },</span></span>
<span class="line"><span style="color:#babed8;">      template: \`</span></span>
<span class="line"><span style="color:#babed8;">        &lt;d-tree :data=&quot;data&quot;&gt;&lt;/d-tree&gt;</span></span>
<span class="line"><span style="color:#babed8;">      \`,</span></span>
<span class="line"><span style="color:#babed8;">      setup() {</span></span>
<span class="line"><span style="color:#babed8;">        const data = [{</span></span>
<span class="line"><span style="color:#babed8;">          label: &#39;一级 1&#39;, level: 1,</span></span>
<span class="line"><span style="color:#babed8;">          children: [{</span></span>
<span class="line"><span style="color:#babed8;">            label: &#39;二级 1-1&#39;, level: 2,</span></span>
<span class="line"><span style="color:#babed8;">            children: [{</span></span>
<span class="line"><span style="color:#babed8;">              label: &#39;三级 1-1-1&#39;, level: 3,</span></span>
<span class="line"><span style="color:#babed8;">            }]</span></span>
<span class="line"><span style="color:#babed8;">          }]</span></span>
<span class="line"><span style="color:#babed8;">        }, {</span></span>
<span class="line"><span style="color:#babed8;">          label: &#39;一级 2&#39;, level: 1,</span></span>
<span class="line"><span style="color:#babed8;">          open: true, // 新增</span></span>
<span class="line"><span style="color:#babed8;">          children: [{</span></span>
<span class="line"><span style="color:#babed8;">            label: &#39;二级 2-1&#39;, level: 2,</span></span>
<span class="line"><span style="color:#babed8;">            children: [{</span></span>
<span class="line"><span style="color:#babed8;">              label: &#39;三级 2-1-1&#39;, level: 3,</span></span>
<span class="line"><span style="color:#babed8;">            }]</span></span>
<span class="line"><span style="color:#babed8;">          }, {</span></span>
<span class="line"><span style="color:#babed8;">            label: &#39;二级 2-2&#39;, level: 2,</span></span>
<span class="line"><span style="color:#babed8;">            children: [{</span></span>
<span class="line"><span style="color:#babed8;">              label: &#39;三级 2-2-1&#39;, level: 3,</span></span>
<span class="line"><span style="color:#babed8;">            }]</span></span>
<span class="line"><span style="color:#babed8;">          }]</span></span>
<span class="line"><span style="color:#babed8;">        }, {</span></span>
<span class="line"><span style="color:#babed8;">          label: &#39;一级 3&#39;, level: 1,</span></span>
<span class="line"><span style="color:#babed8;">          open: true, // 新增</span></span>
<span class="line"><span style="color:#babed8;">          children: [{</span></span>
<span class="line"><span style="color:#babed8;">            label: &#39;二级 3-1&#39;, level: 2,</span></span>
<span class="line"><span style="color:#babed8;">            children: [{</span></span>
<span class="line"><span style="color:#babed8;">              label: &#39;三级 3-1-1&#39;, level: 3,</span></span>
<span class="line"><span style="color:#babed8;">            }]</span></span>
<span class="line"><span style="color:#babed8;">          }, {</span></span>
<span class="line"><span style="color:#babed8;">            label: &#39;二级 3-2&#39;, level: 2,</span></span>
<span class="line"><span style="color:#babed8;">            open: true, // 新增</span></span>
<span class="line"><span style="color:#babed8;">            children: [{</span></span>
<span class="line"><span style="color:#babed8;">              label: &#39;三级 3-2-1&#39;, level: 3,</span></span>
<span class="line"><span style="color:#babed8;">            }]</span></span>
<span class="line"><span style="color:#babed8;">          }]</span></span>
<span class="line"><span style="color:#babed8;">        }, {</span></span>
<span class="line"><span style="color:#babed8;">          label: &#39;一级 4&#39;, level: 1,</span></span>
<span class="line"><span style="color:#babed8;">        }]</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">        return {</span></span>
<span class="line"><span style="color:#babed8;">          data</span></span>
<span class="line"><span style="color:#babed8;">        }</span></span>
<span class="line"><span style="color:#babed8;">      }</span></span>
<span class="line"><span style="color:#babed8;">    })</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    expect(wrapper.classes()).toContain(&#39;devui-tree&#39;)</span></span>
<span class="line"><span style="color:#babed8;">  })</span></span>
<span class="line"><span style="color:#babed8;">})</span></span></code></pre></div><p>再重新执行<code>yarn test</code>命令，发现报错啦～</p><h2 id="_3-遇到的问题及相应的解法" tabindex="-1">3 遇到的问题及相应的解法 <a class="header-anchor" href="#_3-遇到的问题及相应的解法" aria-label="Permalink to &quot;3 遇到的问题及相应的解法&quot;">​</a></h2><h3 id="_3-1-第一个报错-syntaxerror-cannot-use-import-statement-outside-a-module" tabindex="-1">3.1 第一个报错：SyntaxError: Cannot use import statement outside a module <a class="header-anchor" href="#_3-1-第一个报错-syntaxerror-cannot-use-import-statement-outside-a-module" aria-label="Permalink to &quot;3.1 第一个报错：SyntaxError: Cannot use import statement outside a module&quot;">​</a></h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e65605ec30c46059731255c5957a9bd~tplv-k3u1fbpfcp-watermark.image?" alt="图片.png"></p><p>这是一个比较典型的问题，jest解析文件过程中遇到的语法问题。</p><p>报错信息也提示了可能的原因和解法：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">Here&#39;s what you can do:</span></span>
<span class="line"><span style="color:#babed8;">     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.</span></span>
<span class="line"><span style="color:#babed8;">     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript</span></span>
<span class="line"><span style="color:#babed8;">     • To have some of your &quot;node_modules&quot; files transformed, you can specify a custom &quot;transformIgnorePatterns&quot; in your config.</span></span>
<span class="line"><span style="color:#babed8;">     • If you need a custom transformation specify a &quot;transform&quot; option in your config.</span></span>
<span class="line"><span style="color:#babed8;">     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the &quot;moduleNameMapper&quot; config option.</span></span></code></pre></div><p>大意是你可能引入了<code>ES6</code>、<code>TypeScript</code>，但是又没有配置相应的<code>transform</code>转换器。</p><h4 id="安装-babel-jest" tabindex="-1">安装 babel-jest <a class="header-anchor" href="#安装-babel-jest" aria-label="Permalink to &quot;安装 babel-jest&quot;">​</a></h4><p>先安装依赖<code>babel-jest</code>和<code>@babel/preset-env</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yarn add -D babel-jest @babel/preset-env</span></span></code></pre></div><h4 id="配置-jest-transform" tabindex="-1">配置 jest transform <a class="header-anchor" href="#配置-jest-transform" aria-label="Permalink to &quot;配置 jest transform&quot;">​</a></h4><p>jest.config.js</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">module.exports = {</span></span>
<span class="line"><span style="color:#babed8;">  transform: {</span></span>
<span class="line"><span style="color:#babed8;">    &#39;^.+\\\\.(ts|tsx|js|jsx)$&#39;: [</span></span>
<span class="line"><span style="color:#babed8;">      &#39;babel-jest&#39;, { presets: [&#39;@babel/preset-env&#39;] }</span></span>
<span class="line"><span style="color:#babed8;">    ]</span></span>
<span class="line"><span style="color:#babed8;">  },</span></span>
<span class="line"><span style="color:#babed8;">};</span></span></code></pre></div><p>再重新执行<code>yarn test</code>命令，发现<code>又报错啦</code>～</p><h3 id="_3-2-第二个报错-cannot-find-module-vue-template-compiler" tabindex="-1">3.2 第二个报错：Cannot find module &#39;vue-template-compiler&#39; <a class="header-anchor" href="#_3-2-第二个报错-cannot-find-module-vue-template-compiler" aria-label="Permalink to &quot;3.2 第二个报错：Cannot find module &#39;vue-template-compiler&#39;&quot;">​</a></h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61d3a1071ca442a381eef088527223b7~tplv-k3u1fbpfcp-watermark.image?" alt="图片.png"></p><p>这个问题其实是没有安装正确的<code>@vue/test-utils</code>导致的，默认安装的是vue2版本的<code>@vue/test-utils</code>，但我们是vue3组件库，需要安装<code>@vue/test-utils@next</code>。</p><p>我们先按照报错提示安装下<code>vue-template-compiler</code>试试看。</p><h4 id="安装依赖-vue-template-compiler" tabindex="-1">安装依赖 vue-template-compiler <a class="header-anchor" href="#安装依赖-vue-template-compiler" aria-label="Permalink to &quot;安装依赖 vue-template-compiler&quot;">​</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yarn add -D vue-template-compiler</span></span></code></pre></div><p>再重新执行<code>yarn test</code>命令，发现<code>又双报错啦</code>～</p><h3 id="_3-3-第三个报错-vue-packages-version-mismatch" tabindex="-1">3.3 第三个报错：Vue packages version mismatch <a class="header-anchor" href="#_3-3-第三个报错-vue-packages-version-mismatch" aria-label="Permalink to &quot;3.3 第三个报错：Vue packages version mismatch&quot;">​</a></h3><p>果然不是<code>vue-template-compiler</code>的问题，不过这个提示倒是提醒我们是版本不匹配的问题。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/977d4043628544fbad911e141921f38a~tplv-k3u1fbpfcp-watermark.image?" alt="图片.png"></p><h4 id="安装vue3版本的-vue-test-utils-next" tabindex="-1">安装Vue3版本的@vue/test-utils@next <a class="header-anchor" href="#安装vue3版本的-vue-test-utils-next" aria-label="Permalink to &quot;安装Vue3版本的@vue/test-utils@next&quot;">​</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yarn add -D @vue/test-utils@next</span></span></code></pre></div><p>再重新执行<code>yarn test</code>命令，发现<code>又双叒报错啦</code>～</p><p>接下来是一系列的语法错误<code>SyntaxError</code>，都是没有配置相应的transform转换器导致的。</p><h3 id="_3-4-第四个报错-syntaxerror-unexpected-token-expected" tabindex="-1">3.4 第四个报错：SyntaxError: Unexpected token, expected &quot;,&quot; <a class="header-anchor" href="#_3-4-第四个报错-syntaxerror-unexpected-token-expected" aria-label="Permalink to &quot;3.4 第四个报错：SyntaxError: Unexpected token, expected &quot;,&quot;&quot;">​</a></h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e425dc4f832b4ec1900e9610229e93fb~tplv-k3u1fbpfcp-watermark.image?" alt="图片.png"></p><h4 id="安装-babel-preset-typescript" tabindex="-1">安装 @babel/preset-typescript <a class="header-anchor" href="#安装-babel-preset-typescript" aria-label="Permalink to &quot;安装 @babel/preset-typescript&quot;">​</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yarn add -D @babel/preset-typescript</span></span></code></pre></div><h4 id="配置-babel-preset-typescript" tabindex="-1">配置 @babel/preset-typescript <a class="header-anchor" href="#配置-babel-preset-typescript" aria-label="Permalink to &quot;配置 @babel/preset-typescript&quot;">​</a></h4><p>jest.config.js</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">module.exports = {</span></span>
<span class="line"><span style="color:#babed8;">  transform: {</span></span>
<span class="line"><span style="color:#babed8;">    &#39;^.+\\\\.(ts|tsx|js|jsx)$&#39;: [</span></span>
<span class="line"><span style="color:#babed8;">      &#39;babel-jest&#39;, {</span></span>
<span class="line"><span style="color:#babed8;">        presets: [</span></span>
<span class="line"><span style="color:#babed8;">          &#39;@babel/preset-env&#39;,</span></span>
<span class="line"><span style="color:#babed8;">          &#39;@babel/preset-typescript&#39; // 新增</span></span>
<span class="line"><span style="color:#babed8;">        ]</span></span>
<span class="line"><span style="color:#babed8;">      }</span></span>
<span class="line"><span style="color:#babed8;">    ]</span></span>
<span class="line"><span style="color:#babed8;">  },</span></span>
<span class="line"><span style="color:#babed8;">};</span></span></code></pre></div><p>重新执行<code>yarn test</code>命令，还是报错～</p><h3 id="_3-5-第五个报错-syntaxerror-unexpected-token" tabindex="-1">3.5 第五个报错：SyntaxError: Unexpected token &#39;&lt;&#39; <a class="header-anchor" href="#_3-5-第五个报错-syntaxerror-unexpected-token" aria-label="Permalink to &quot;3.5 第五个报错：SyntaxError: Unexpected token &#39;&lt;&#39;&quot;">​</a></h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/801cd2d84c4d4c07a73e3d9d5c77f145~tplv-k3u1fbpfcp-watermark.image?" alt="图片.png"></p><h4 id="安装-vue-babel-plugin-jsx" tabindex="-1">安装 @vue/babel-plugin-jsx <a class="header-anchor" href="#安装-vue-babel-plugin-jsx" aria-label="Permalink to &quot;安装 @vue/babel-plugin-jsx&quot;">​</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yarn add -D @vue/babel-plugin-jsx</span></span></code></pre></div><h4 id="配置-vue-babel-plugin-jsx" tabindex="-1">配置 @vue/babel-plugin-jsx <a class="header-anchor" href="#配置-vue-babel-plugin-jsx" aria-label="Permalink to &quot;配置 @vue/babel-plugin-jsx&quot;">​</a></h4><p>jest.config.js</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">module.exports = {</span></span>
<span class="line"><span style="color:#babed8;">  transform: {</span></span>
<span class="line"><span style="color:#babed8;">    &#39;^.+\\\\.(ts|tsx|js|jsx)$&#39;: [</span></span>
<span class="line"><span style="color:#babed8;">      &#39;babel-jest&#39;, {</span></span>
<span class="line"><span style="color:#babed8;">        presets: [</span></span>
<span class="line"><span style="color:#babed8;">          &#39;@babel/preset-env&#39;,</span></span>
<span class="line"><span style="color:#babed8;">          &#39;@babel/preset-typescript&#39;</span></span>
<span class="line"><span style="color:#babed8;">        ],</span></span>
<span class="line"><span style="color:#babed8;">        plugins: [&#39;@vue/babel-plugin-jsx&#39;] // 新增</span></span>
<span class="line"><span style="color:#babed8;">      }</span></span>
<span class="line"><span style="color:#babed8;">    ]</span></span>
<span class="line"><span style="color:#babed8;">  },</span></span>
<span class="line"><span style="color:#babed8;">};</span></span></code></pre></div><p>继续执行<code>yarn test</code>命令，还是报错～</p><h3 id="_3-6-第六个报错-syntaxerror-invalid-or-unexpected-token" tabindex="-1">3.6 第六个报错：SyntaxError: Invalid or unexpected token <a class="header-anchor" href="#_3-6-第六个报错-syntaxerror-invalid-or-unexpected-token" aria-label="Permalink to &quot;3.6 第六个报错：SyntaxError: Invalid or unexpected token&quot;">​</a></h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40fe4262c1094d04a1caca8a1586c6cc~tplv-k3u1fbpfcp-watermark.image?" alt="图片.png"></p><h4 id="修改样式导入" tabindex="-1">修改样式导入 <a class="header-anchor" href="#修改样式导入" aria-label="Permalink to &quot;修改样式导入&quot;">​</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import &#39;./tree.scss&#39;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">-&gt;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">import &#39;./tree&#39;</span></span></code></pre></div><p>再重新执行<code>yarn test</code>命令，发现<code>又双叒叕报错啦</code>～</p><h3 id="_3-7-第七个错-referenceerror-document-is-not-defined" tabindex="-1">3.7 第七个错：ReferenceError: document is not defined <a class="header-anchor" href="#_3-7-第七个错-referenceerror-document-is-not-defined" aria-label="Permalink to &quot;3.7 第七个错：ReferenceError: document is not defined&quot;">​</a></h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c832b4d3706445394576f5abb9838d5~tplv-k3u1fbpfcp-watermark.image?" alt="图片.png"></p><p>这个报错提示得很清楚：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">The error below may be caused by using the wrong test environment, see https://jestjs.io/docs/configuration#testenvironment-string.</span></span>
<span class="line"><span style="color:#babed8;">    Consider using the &quot;jsdom&quot; test environment.</span></span></code></pre></div><p>测试环境错误，需要配置<code>jsdom</code>的测试环境。</p><h4 id="修改测试环境-testenvironment" tabindex="-1">修改测试环境 testEnvironment <a class="header-anchor" href="#修改测试环境-testenvironment" aria-label="Permalink to &quot;修改测试环境 testEnvironment&quot;">​</a></h4><p>jest.config.js</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">testEnvironment: &#39;jest-environment-jsdom&#39;,</span></span></code></pre></div><p>终于成功了！<img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54a9797041c84d4e84442b834d1bd2e3~tplv-k3u1fbpfcp-watermark.image?" alt="图片.png"></p><p>此处应该庆祝一下🎉！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d6470f55cb9444a9aa5eb0b6dc57583~tplv-k3u1fbpfcp-watermark.image?" alt="图片.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/202bb63d018e46e2b83d423d467f69d4~tplv-k3u1fbpfcp-watermark.image?" alt="图片.png"></p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>本文主要分享搭建vue3组件库单元测试环境的步骤、遇到的问题及相应的解法。</p><ol><li>引入<code>jest</code>支持基本的单元测试</li><li>引入<code>@vue/test-utils</code>支持vue组件的单元测试</li><li>配置<code>jest.config.js</code>，增加<code>@babel/preset-env</code>和<code>@babel/preset-typescript</code>两个<code>preset</code>以支持<code>ES6</code>和<code>TS</code>语法，以及一个 <code>@vue/babel-plugin-jsx</code> plugin 以支持<code>JSX</code>语法</li><li>配置<code>testEnvironment</code>为<code>jest-environment-jsdom</code></li><li>编写单元测试的三部曲：<code>测试套</code>、<code>单元测试</code>、<code>测试断言</code></li><li>分析了搭建单元测试环境中遇到的典型问题及相应的解决方案</li></ol><h2 id="欢迎一起建设-devui-开源项目" tabindex="-1">欢迎一起建设 DevUI 开源项目 <a class="header-anchor" href="#欢迎一起建设-devui-开源项目" aria-label="Permalink to &quot;欢迎一起建设 DevUI 开源项目&quot;">​</a></h2><p>我们 <code>DevUI</code> 团队有多个开源项目，现在都在招募<code>contributor</code>，欢迎大家一起参与开源中来！(感兴趣的小伙伴可以添加<code>DevUI</code>小助手的微信：<code>devui-official</code>，将你拉到我们的核心开发群)</p><ul><li>Ng DevUI: <a href="https://github.com/DevCloudFE/ng-devui" target="_blank" rel="noreferrer">https://github.com/DevCloudFE/ng-devui</a></li><li>Vue DevUI: <a href="https://gitee.com/devui/vue-devui" target="_blank" rel="noreferrer">https://gitee.com/devui/vue-devui</a></li><li>DevUI Admin <a href="https://github.com/DevCloudFE/ng-devui-admin" target="_blank" rel="noreferrer">https://github.com/DevCloudFE/ng-devui-admin</a></li></ul><p><code>DevUI</code>官网：<a href="https://devui.design/" target="_blank" rel="noreferrer">https://devui.design/</a></p><p>也欢迎关注我和村长的【Vue DevUI开源指南】系列直播！</p><p>Vue DevUI开源指南系列直播打算分成两条线：</p><ol><li>组件设计和实现</li><li>组件库的工程化</li></ol><p>目前【组件设计和实现】已经完成了3期（还未结束）：</p><ol><li><a href="https://www.bilibili.com/video/BV1GU4y1N7eC/" target="_blank" rel="noreferrer">【我要做开源】华为大佬亲授，Vue DevUI开源指南01：提交我的第一次pr</a></li><li><a href="https://www.bilibili.com/video/BV1su411f7a1/" target="_blank" rel="noreferrer">【我要做开源】华为大佬亲授，Vue DevUI开源指南02：做一个有模有样的Tree组件</a></li><li><a href="https://www.bilibili.com/video/BV1Z64y187dR/" target="_blank" rel="noreferrer">【我要做开源】华为大佬亲授，Vue DevUI开源指南03：学会“单测”才会有安全感！完成Tree组件！</a></li></ol><p>【组件库工程化】已经完成了2期（正在进行中）：</p><ol><li><a href="https://www.bilibili.com/video/BV1xR4y1H7yT/" target="_blank" rel="noreferrer">【我要做开源】华为大佬亲授，Vue DevUI开源指南04：组件库工程化建设之项目初始化、jsx支持</a></li><li><a href="https://www.bilibili.com/video/BV1r44y1x7sk" target="_blank" rel="noreferrer">【我要做开源】华为大佬亲授，Vue DevUI开源指南05：开源组件库中的文档建设，vitepress使用过程中的踩坑经历，克服这些困难你将收获多多！</a></li><li><a href="https://juejin.cn/post/7021915468046811144" target="_blank" rel="noreferrer">【我要做开源】Vue DevUI开源指南06：手把手带你开发一个脚手架 </a></li></ol><p>已经跟村长老师达成共识<img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/744ce3b0c5ca4f5b9cc5285593166d7d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png">，只要村长老师的直播间不倒，只要还有小伙伴愿意参与进来，这个系列就会一直做下去！</p><p>欢迎大家持续关注、分享出去~我们一起来从0到1做一个vue3开源组件库！</p><p>每周五晚上九点，我们在村长的直播间，不见不散！</p><p><a href="https://live.bilibili.com/22531545" target="_blank" rel="noreferrer">村长直播间地址</a></p>`,120);function r(i,d,b,u,h,m){const e=s("EditInfo");return n(),l("div",null,[c,t(e,{time:"2021年10月27日 00:20",title:"阅读 1890 ·  点赞 34 ·  评论 7 ·  收藏 30"})])}const v=a(o,[["render",r]]);export{g as __pageData,v as default};
