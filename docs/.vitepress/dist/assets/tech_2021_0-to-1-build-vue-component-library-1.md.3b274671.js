import{_ as a,B as e,o as n,c as p,G as l,Q as o}from"./chunks/framework.1fee3549.js";const g=JSON.parse('{"title":"从0到1搭建Vue组件库01：提交我的第一次 PR","description":"","frontmatter":{},"headers":[],"relativePath":"tech/2021/0-to-1-build-vue-component-library-1.md","filePath":"tech/2021/0-to-1-build-vue-component-library-1.md"}'),t={name:"tech/2021/0-to-1-build-vue-component-library-1.md"},c=o(`<h1 id="从0到1搭建vue组件库01-提交我的第一次-pr" tabindex="-1">从0到1搭建Vue组件库01：提交我的第一次 PR <a class="header-anchor" href="#从0到1搭建vue组件库01-提交我的第一次-pr" aria-label="Permalink to &quot;从0到1搭建Vue组件库01：提交我的第一次 PR&quot;">​</a></h1><p><img src="https://user-images.githubusercontent.com/9566362/201511144-b05b690e-7294-4d9f-ad8c-d5c707fc43fd.png" alt="image"></p><p>欢迎大家围观Kagol和村长的直播，手把手带你一起为Vue DevUI开源组件库提交PR。</p><p>也欢迎大家参与到Vue DevUI的建设中来，可以加小助手微信 devui-official</p><p>Vue DevUI代码仓库：</p><p><a href="https://gitee.com/devui/vue-devui" target="_blank" rel="noreferrer">https://gitee.com/devui/vue-devui</a></p><p>B站直播链接：</p><p><a href="https://www.bilibili.com/video/BV1GU4y1N7eC" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1GU4y1N7eC</a></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f39ede310e3f4c599b6bde45905d0704~tplv-k3u1fbpfcp-watermark.image?" alt="B站直播分享图片.jpeg"></p><p>以下是正文：</p><h2 id="参与开源项目的步骤" tabindex="-1">参与开源项目的步骤 <a class="header-anchor" href="#参与开源项目的步骤" aria-label="Permalink to &quot;参与开源项目的步骤&quot;">​</a></h2><p>参与开源的步骤：</p><ol><li>fork仓库</li><li>生成和配置SSH公钥</li><li>clone个人仓库代码</li><li>本地启动项目</li><li>本地开发和提交代码</li><li>设置upstream和同步源仓库最新代码</li><li>提交PR</li></ol><h3 id="fork仓库" tabindex="-1">fork仓库 <a class="header-anchor" href="#fork仓库" aria-label="Permalink to &quot;fork仓库&quot;">​</a></h3><p>源仓库：<a href="https://gitee.com/devui/vue-devui" target="_blank" rel="noreferrer">https://gitee.com/devui/vue-devui</a></p><p>点击源仓库右上角的Fork按钮</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f316a78235a74d0282571f99a17d244b~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>在弹出框中选择自己的个人空间并确认</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7d833c6cf204616a04c43abe7d2df03~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>这时会跳转到个人仓库空间：<a href="https://gitee.com/kagol/vue-devui" target="_blank" rel="noreferrer">https://gitee.com/kagol/vue-devui</a></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5a3bce5ac1e4020bda4935368c89d66~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>等待数秒，仓库就fork好了，可以看到个人仓库名称的下面有一个：</p><p>forked from DevUI/vue-devui</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dd45c897cc0486aa11f33901e602b17~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="生成和配置ssh公钥" tabindex="-1">生成和配置SSH公钥 <a class="header-anchor" href="#生成和配置ssh公钥" aria-label="Permalink to &quot;生成和配置SSH公钥&quot;">​</a></h3><p>检查本地公钥：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">cd ~/.ssh</span></span></code></pre></div><p>生成SSH公钥：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">ssh-keygen -t rsa -C kagol@sina.com</span></span></code></pre></div><p>查看并拷贝SSH公钥：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">cat ~/.ssh/id_rsa.pub</span></span></code></pre></div><p>一般是以<code>ssh-rsa</code>开头，中间一长串字符，以个人邮箱结尾。</p><p>配置SSH公钥：</p><p>方式一：</p><p>直接输入链接：<a href="https://gitee.com/profile/sshkeys" target="_blank" rel="noreferrer">https://gitee.com/profile/sshkeys</a></p><p>方式二：</p><p>点击右上角的设置按钮：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f9aec1cc70254326a87a6843a6c3f8ca~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>再点击左侧导航中安全设置的SSH公钥：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/832abb5d68ed40919851b1b4ad57be8e~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>即可进入SSH公钥配置页面。</p><p>把刚才复制下来的公钥粘贴到公钥文本框中，点击确定即完成SSH公钥配置。</p><h3 id="clone个人仓库代码" tabindex="-1">clone个人仓库代码 <a class="header-anchor" href="#clone个人仓库代码" aria-label="Permalink to &quot;clone个人仓库代码&quot;">​</a></h3><p>配置好SSH公钥，即可以clone代码啦。</p><p>复制SSH地址：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e6e2e36f2654c778ea4c55597ca4f5c~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>在VSCode终端中输入命令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">git clone git@gitee.com:kagol/vue-devui.git</span></span></code></pre></div><p>等上数秒，即可完成仓库代码的克隆啦。</p><h3 id="本地启动项目" tabindex="-1">本地启动项目 <a class="header-anchor" href="#本地启动项目" aria-label="Permalink to &quot;本地启动项目&quot;">​</a></h3><p>要想快速了解一个开源项目，一般是先看下根目录下的README文档，里面有该项目的介绍，和快速上手的说明。</p><p>我们照着README文档将项目先启动起来：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">## 安装依赖</span></span>
<span class="line"><span style="color:#babed8;">yarn</span></span>
<span class="line"><span style="color:#babed8;">## npm i</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">## 本地启动</span></span>
<span class="line"><span style="color:#babed8;">yarn dev</span></span>
<span class="line"><span style="color:#babed8;">## npm run dev</span></span></code></pre></div><h3 id="本地开发和提交代码" tabindex="-1">本地开发和提交代码 <a class="header-anchor" href="#本地开发和提交代码" aria-label="Permalink to &quot;本地开发和提交代码&quot;">​</a></h3><p>将本地修改的代码添加到git暂存区：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">git add .</span></span></code></pre></div><p>将暂存区的代码提交到本地git仓库:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">git commit -m &quot;feat: 增加基础版tree组件&quot;</span></span></code></pre></div><p>将本地git仓库代码push到远程个人仓库：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">git push origin dev</span></span></code></pre></div><h3 id="设置upstream和同步源仓库最新代码" tabindex="-1">设置upstream和同步源仓库最新代码 <a class="header-anchor" href="#设置upstream和同步源仓库最新代码" aria-label="Permalink to &quot;设置upstream和同步源仓库最新代码&quot;">​</a></h3><p>查看远程仓库地址：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">git remote -v</span></span></code></pre></div><p>默认情况下clone的仓库有以下两个远程地址：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ git remote -v</span></span>
<span class="line"><span style="color:#babed8;">origin  git@gitee.com:kagol/vue-devui.git (fetch)</span></span>
<span class="line"><span style="color:#babed8;">origin  git@gitee.com:kagol/vue-devui.git (push)</span></span></code></pre></div><p>为了同步源仓库最新代码，我们需要配置一个upstream地址：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">git remote add upstream git@gitee.com:devui/vue-devui.git</span></span></code></pre></div><p>配置完我们在查看下远程仓库配置：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ git remote -v</span></span>
<span class="line"><span style="color:#babed8;">origin  git@gitee.com:kagol/vue-devui.git (fetch)</span></span>
<span class="line"><span style="color:#babed8;">origin  git@gitee.com:kagol/vue-devui.git (push)</span></span>
<span class="line"><span style="color:#babed8;">upstream    git@gitee.com:devui/vue-devui.git (fetch)</span></span>
<span class="line"><span style="color:#babed8;">upstream    git@gitee.com:devui/vue-devui.git (push)</span></span></code></pre></div><p>可以看到多了两个upstream地址。</p><p>同步源仓库最新代码到本地：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">git pull upstream dev</span></span></code></pre></div><h3 id="提交pr" tabindex="-1">提交PR <a class="header-anchor" href="#提交pr" aria-label="Permalink to &quot;提交PR&quot;">​</a></h3><p>访问个人仓库的PR页面：<a href="https://gitee.com/kagol/vue-devui/pulls" target="_blank" rel="noreferrer">https://gitee.com/kagol/vue-devui/pulls</a></p><p>点击右上角的新建Pull Request按钮：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ef4bb280a684838b1331c97988f8ddb~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>源分支选择个人仓库kagol/vue-devui的分支，目标分支选择devui/vue-devui的分支：<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6331d18ad60a4a289e2b8489d71eb95a~tplv-k3u1fbpfcp-zoom-1.image" alt="">编写PR的标题、描述，选择一个标签，查看下改动的内容，确保提交的代码没有问题，点击创建按钮：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc28eba0590d482a9463a55f01a9b8c7~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>PR就创建好了，并自动跳转到PR详情页面：<a href="https://gitee.com/devui/vue-devui/pulls/111" target="_blank" rel="noreferrer">https://gitee.com/devui/vue-devui/pulls/111</a><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04c29eb0059540949f91fc7d9ba009e2~tplv-k3u1fbpfcp-zoom-1.image" alt="">后续就是Vue DevUI组件库项目的管理员对你提交的PR进行代码检视，没问题就可以合入啦～</p><h2 id="tree组件的案例" tabindex="-1">Tree组件的案例 <a class="header-anchor" href="#tree组件的案例" aria-label="Permalink to &quot;Tree组件的案例&quot;">​</a></h2><p>步骤：</p><ol><li>使用命令创建一个新组件tree</li><li>给tree组件生成新的组件库入口文件</li></ol><ol start="3"><li>给tree组件生成网站左侧导航</li><li>给tree组件生成demo文档</li></ol><ol start="5"><li>预览tree组件的demo文档</li><li>编写tree组件的基本渲染逻辑</li></ol><p>\\</p><h3 id="使用命令创建一个新组件tree" tabindex="-1">使用命令创建一个新组件tree <a class="header-anchor" href="#使用命令创建一个新组件tree" aria-label="Permalink to &quot;使用命令创建一个新组件tree&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yarn cli:create</span></span></code></pre></div><p>选择组件component</p><h3 id="给tree组件生成新的组件库入口文件" tabindex="-1">给tree组件生成新的组件库入口文件 <a class="header-anchor" href="#给tree组件生成新的组件库入口文件" aria-label="Permalink to &quot;给tree组件生成新的组件库入口文件&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yarn cli:create</span></span></code></pre></div><p>选择vue-devui</p><h3 id="给tree组件生成网站左侧导航" tabindex="-1">给tree组件生成网站左侧导航 <a class="header-anchor" href="#给tree组件生成网站左侧导航" aria-label="Permalink to &quot;给tree组件生成网站左侧导航&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yarn cli:create</span></span></code></pre></div><p>选择vitepress/sidebar</p><h3 id="给tree组件生成demo文档" tabindex="-1">给tree组件生成demo文档 <a class="header-anchor" href="#给tree组件生成demo文档" aria-label="Permalink to &quot;给tree组件生成demo文档&quot;">​</a></h3><p>创建sites/components/tree/index.md文件</p><h3 id="预览tree组件的demo文档" tabindex="-1">预览tree组件的demo文档 <a class="header-anchor" href="#预览tree组件的demo文档" aria-label="Permalink to &quot;预览tree组件的demo文档&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yarn dev</span></span></code></pre></div><p>访问：<code>http://localhost:3000/components/tree/</code></p><h3 id="编写tree组件的基本渲染逻辑" tabindex="-1">编写tree组件的基本渲染逻辑 <a class="header-anchor" href="#编写tree组件的基本渲染逻辑" aria-label="Permalink to &quot;编写tree组件的基本渲染逻辑&quot;">​</a></h3><p>devui/tree/src/tree.tsx</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import { defineComponent, toRefs } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#babed8;">import { treeProps, TreeProps } from &#39;./tree-types&#39;</span></span>
<span class="line"><span style="color:#babed8;">import &#39;./tree.scss&#39;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">export default defineComponent({</span></span>
<span class="line"><span style="color:#babed8;">  name: &#39;DTree&#39;,</span></span>
<span class="line"><span style="color:#babed8;">  props: treeProps,</span></span>
<span class="line"><span style="color:#babed8;">  emits: [],</span></span>
<span class="line"><span style="color:#babed8;">  setup(props: TreeProps, ctx) {</span></span>
<span class="line"><span style="color:#babed8;">    const { data } = toRefs(props)</span></span>
<span class="line"><span style="color:#babed8;">    console.log(&#39;data:&#39;, data, data.value)</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    return () =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">      return &lt;div class=&quot;d-tree&quot;&gt;{</span></span>
<span class="line"><span style="color:#babed8;">        data.value.map(item =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">          return &lt;div&gt;{item.label}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#babed8;">        })</span></span>
<span class="line"><span style="color:#babed8;">      }&lt;/div&gt;</span></span>
<span class="line"><span style="color:#babed8;">    }</span></span>
<span class="line"><span style="color:#babed8;">  }</span></span>
<span class="line"><span style="color:#babed8;">})</span></span></code></pre></div><h3 id="在demo中使用tree组件" tabindex="-1">在demo中使用tree组件 <a class="header-anchor" href="#在demo中使用tree组件" aria-label="Permalink to &quot;在demo中使用tree组件&quot;">​</a></h3><p>sites/components/tree/index.md</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">## Tree 树</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">一种表现嵌套结构的组件。</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">#### 何时使用</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用树控件可以完整展现其中的层级关系，并具有展开收起选择等交互功能。</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">:::demo</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">\`\`\`vue</span></span>
<span class="line"><span style="color:#babed8;">&lt;template&gt;</span></span>
<span class="line"><span style="color:#babed8;">  &lt;d-tree :data=&quot;data&quot;&gt;&lt;/d-tree&gt;</span></span>
<span class="line"><span style="color:#babed8;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#babed8;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#babed8;">import { defineComponent, ref } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">export default defineComponent({</span></span>
<span class="line"><span style="color:#babed8;">  setup() {</span></span>
<span class="line"><span style="color:#babed8;">    const data = ref([{</span></span>
<span class="line"><span style="color:#babed8;">      label: &#39;一级 1&#39;,</span></span>
<span class="line"><span style="color:#babed8;">      children: [{</span></span>
<span class="line"><span style="color:#babed8;">        label: &#39;二级 1-1&#39;,</span></span>
<span class="line"><span style="color:#babed8;">        children: [{</span></span>
<span class="line"><span style="color:#babed8;">          label: &#39;三级 1-1-1&#39;</span></span>
<span class="line"><span style="color:#babed8;">        }]</span></span>
<span class="line"><span style="color:#babed8;">      }]</span></span>
<span class="line"><span style="color:#babed8;">    }, {</span></span>
<span class="line"><span style="color:#babed8;">      label: &#39;一级 2&#39;,</span></span>
<span class="line"><span style="color:#babed8;">      children: [{</span></span>
<span class="line"><span style="color:#babed8;">        label: &#39;二级 2-1&#39;,</span></span>
<span class="line"><span style="color:#babed8;">        children: [{</span></span>
<span class="line"><span style="color:#babed8;">          label: &#39;三级 2-1-1&#39;</span></span>
<span class="line"><span style="color:#babed8;">        }]</span></span>
<span class="line"><span style="color:#babed8;">      }, {</span></span>
<span class="line"><span style="color:#babed8;">        label: &#39;二级 2-2&#39;,</span></span>
<span class="line"><span style="color:#babed8;">        children: [{</span></span>
<span class="line"><span style="color:#babed8;">          label: &#39;三级 2-2-1&#39;</span></span>
<span class="line"><span style="color:#babed8;">        }]</span></span>
<span class="line"><span style="color:#babed8;">      }]</span></span>
<span class="line"><span style="color:#babed8;">    }, {</span></span>
<span class="line"><span style="color:#babed8;">      label: &#39;一级 3&#39;,</span></span>
<span class="line"><span style="color:#babed8;">      children: [{</span></span>
<span class="line"><span style="color:#babed8;">        label: &#39;二级 3-1&#39;,</span></span>
<span class="line"><span style="color:#babed8;">        children: [{</span></span>
<span class="line"><span style="color:#babed8;">          label: &#39;三级 3-1-1&#39;</span></span>
<span class="line"><span style="color:#babed8;">        }]</span></span>
<span class="line"><span style="color:#babed8;">      }, {</span></span>
<span class="line"><span style="color:#babed8;">        label: &#39;二级 3-2&#39;,</span></span>
<span class="line"><span style="color:#babed8;">        children: [{</span></span>
<span class="line"><span style="color:#babed8;">          label: &#39;三级 3-2-1&#39;</span></span>
<span class="line"><span style="color:#babed8;">        }]</span></span>
<span class="line"><span style="color:#babed8;">      }]</span></span>
<span class="line"><span style="color:#babed8;">    }])</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    return {</span></span>
<span class="line"><span style="color:#babed8;">      data</span></span>
<span class="line"><span style="color:#babed8;">    }</span></span>
<span class="line"><span style="color:#babed8;">  }</span></span>
<span class="line"><span style="color:#babed8;">})</span></span>
<span class="line"><span style="color:#babed8;">&lt;/script&gt;</span></span>
<span class="line"><span style="color:#babed8;">\`\`\`</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">:::</span></span></code></pre></div><h3 id="组件props和ts类型文件" tabindex="-1">组件props和TS类型文件 <a class="header-anchor" href="#组件props和ts类型文件" aria-label="Permalink to &quot;组件props和TS类型文件&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">PropType</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">ExtractPropTypes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">interface</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">TreeItem</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">children</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">TreeData</span></span>
<span class="line"><span style="color:#BABED8;">  [key: string]</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">any</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">type</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">TreeData</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TreeItem</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> treeProps </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Array </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">PropType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TreeData</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#82AAFF;">default</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">type</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">TreeProps</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">ExtractPropTypes</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#BABED8;"> treeProps</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>`,107);function r(i,d,b,y,u,m){const s=e("EditInfo");return n(),p("div",null,[c,l(s,{time:"2021年09月18日 22:03",title:"阅读 2398 ·  点赞 24 ·  评论 13 ·  收藏 20"})])}const f=a(t,[["render",r]]);export{g as __pageData,f as default};
