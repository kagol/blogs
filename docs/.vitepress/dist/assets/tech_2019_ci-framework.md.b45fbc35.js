import{_ as a,B as n,o as e,c as t,G as l,Q as p}from"./chunks/framework.1fee3549.js";const g=JSON.parse('{"title":"[BUGCASE]CI框架的post方法对url做了防xss攻击的处理引发的文件编码错误","description":"","frontmatter":{},"headers":[],"relativePath":"tech/2019/ci-framework.md","filePath":"tech/2019/ci-framework.md"}'),o={name:"tech/2019/ci-framework.md"},i=p(`<h1 id="bugcase-ci框架的post方法对url做了防xss攻击的处理引发的文件编码错误" tabindex="-1">[BUGCASE]CI框架的post方法对url做了防xss攻击的处理引发的文件编码错误 <a class="header-anchor" href="#bugcase-ci框架的post方法对url做了防xss攻击的处理引发的文件编码错误" aria-label="Permalink to &quot;[BUGCASE]CI框架的post方法对url做了防xss攻击的处理引发的文件编码错误&quot;">​</a></h1><h2 id="一、问题描述" tabindex="-1">一、问题描述 <a class="header-anchor" href="#一、问题描述" aria-label="Permalink to &quot;一、问题描述&quot;">​</a></h2><p>出现问题的链接： <a href="http://adm.apply.wechat.com/admin/index.php/order/detail?country=others&amp;st=1&amp;order_id=59de1481875cb2430" target="_blank" rel="noreferrer">http://adm.apply.wechat.com/admin/index.php/order/detail?country=others&amp;st=1&amp;order_id=59de1481875cb2430</a> 进入以上页面，点击&quot;Download&quot;按钮</p><p><img src="https://img2018.cnblogs.com/blog/296720/201901/296720-20190117164939376-1976741991.png" alt=""></p><p>页面报错，没法下载</p><p><img src="https://img2018.cnblogs.com/blog/296720/201901/296720-20190117164946879-1297096158.png" alt=""></p><h2 id="二、问题分析" tabindex="-1">二、问题分析 <a class="header-anchor" href="#二、问题分析" aria-label="Permalink to &quot;二、问题分析&quot;">​</a></h2><h3 id="_1-初步分析" tabindex="-1">1.初步分析 <a class="header-anchor" href="#_1-初步分析" aria-label="Permalink to &quot;1.初步分析&quot;">​</a></h3><p>通过查看相关代码可以了解到文件下载的过程如下：</p><ul><li>取到下载链接中的mid参数</li><li>对mid先后进行url解码和base64解码</li><li>将解码后的字符串按&quot;|&quot;进行分隔</li><li>判断得到的数组是否存在第二个元素，不存在会返回404，存在则会利用分隔得到的两个值进行下载</li></ul><p>其中分隔得到的两个值分别是mid和filename</p><p>报错下载链接：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">http://adm.apply.wechat.com/admin/index.php/updown/download_file/?mid=YjBhNDZlNDVhMjk+MGY1ZTFjYTE4ZjI0MDYwNDMyMWN80JjQn1%2FQlNCy0L7RgNC90LjQul%2FQ</span></span></code></pre></div><p>mid：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">YjBhNDZlNDVhMjk+MGY1ZTFjYTE4ZjI0MDYwNDMyMWN80JjQn1%2FQlNCy0L7RgNC90LjQul%2FQ</span></span></code></pre></div><p>对报错链接进行上述步骤，发现解码后的字符是一堆乱码，并不包含&quot;|&quot;： url解码：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">YjBhNDZlNDVhMjk MGY1ZTFjYTE4ZjI0MDYwNDMyMWN80JjQn1/QlNCy0L7RgNC90LjQul/Q</span></span></code></pre></div><p>base64解码：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">b0a46e45a29\fYLX،N\f</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">\f̌Xߴ&amp;4&#39;״%4,/\`4/t.4.</span></span></code></pre></div><p>因此报错，无法下载</p><p>为什么其他用户上传的文件可以下载，这个却不能下载？ 这是一个什么文件？下载链接中的mid为什么会错？</p><h3 id="_2-报错的文件是什么" tabindex="-1">2.报错的文件是什么 <a class="header-anchor" href="#_2-报错的文件是什么" aria-label="Permalink to &quot;2.报错的文件是什么&quot;">​</a></h3><p>要找到用户上传的文件，需要收集一些信息</p><p>OA注册邮箱：XXX@gmail.com 申请时间：2017-10-11 注册IP：XX.XX.XX.XX</p><p>查看2017.10.11的日志发现用户上传的文件目录：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&quot;\\/data\\/XXX\\/upload_files\\/\\u0418\\u041f_\\u0414\\u0432\\u043e\\u0440\\u043d\\u0438\\u043a_\\u0420\\u0435\\u043a\\u0432\\u0438\\u0437\\u0438\\u0442\\u044b.docx&quot;</span></span></code></pre></div><p>文件名经过unicode编码，转码之后：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">ИП_Дворник_Реквизиты.docx</span></span></code></pre></div><p>还有一个是一样的文件：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">ИП_Дворник_Реквизиты1.docx</span></span></code></pre></div><p>果然是很奇葩的文件名</p><p>这个文件名是怎么编码成mid的呢？ 为什么mid会错？</p><h3 id="_3-mid为什么会错" tabindex="-1">3.mid为什么会错 <a class="header-anchor" href="#_3-mid为什么会错" aria-label="Permalink to &quot;3.mid为什么会错&quot;">​</a></h3><p>通过分析，了解到mid的值来自mongodb数据库中的company_attach和proposal_attach两个字段，也就是说mid在存入数据库时出错</p><p>这时需要了解下mid是怎么存入数据库的</p><p>用同样的两个文件，重新申请一个OA，在上传(updown/upload_file)的时候会对文件名做处理，具体过程：</p><ul><li>将得到的mid和filename用&quot;|&quot;拼接起来</li><li>对拼接得到的字符串做一次base64编码</li><li>在对base64编码后的字符串做一次url编码</li></ul><p>在最后一步提交(register2/do_apply)时会操作数据库</p><p>通过分析日志发现，在执行insert之前，这两个字段就已经是错误的</p><p>取值方式是：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$this-&gt;input-&gt;post(&#39;company_attach&#39;, TRUE);</span></span>
<span class="line"><span style="color:#babed8;">$this-&gt;input-&gt;post(&#39;proposal_attach&#39;, TRUE);</span></span></code></pre></div><p>在调用do_apply接口时，打开Chrome的Network观察到接口的参数是：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">company_attach:N2ZmODMyOWZhOWQ0MzIwNDI1OTZmMTBiOTBhZTUzOTh80JjQn1%2FQlNCy0L7RgNC90LjQul%2FQoNC10LrQstC40LfQuNGC0YsuZG9jeA%3D%3D</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">proposal_attach:NzU3ZGVjOTg0NWJkNzkwZDEyYjQwNDU3MGZjMjdlN2F80JjQn1%2FQlNCy0L7RgNC90LjQul%2FQoNC10LrQstC40LfQuNGC0YsxLmRvY3g%3D</span></span></code></pre></div><p>这个参数经过urldecode-&gt;base64_decode两次解码之后得到：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">7ff8329fa9d432042596f10b90ae5398|ИП_Дворник_Реквизиты.docx</span></span>
<span class="line"><span style="color:#babed8;">757dec9845bd790d12b404570fc27e7a|ИП_Дворник_Реквизиты1.docx</span></span></code></pre></div><p>说明<code>$this-&gt;input-&gt;post(&#39;proposal_attach&#39;, TRUE);</code>这种取值方式可能会对取到的参数值进行处理，导致得到的不是我们想要的结果</p><p>做了什么处理呢？</p><h3 id="_4-ci框架的input-post-方法对取到的值做了什么处理" tabindex="-1">4.CI框架的input-&gt;post()方法对取到的值做了什么处理 <a class="header-anchor" href="#_4-ci框架的input-post-方法对取到的值做了什么处理" aria-label="Permalink to &quot;4.CI框架的input-&amp;gt;post()方法对取到的值做了什么处理&quot;">​</a></h3><p>项目中用的CI框架版本是v2.1.4</p><p>对CodeIgniter的源码进行分析</p><p>system/core/Input.php中的post()调用了_fetch_from_array()</p><p>该方法会对post()的第二个参数$xss_clean进行判断，如果为TRUE，则执行：</p><p>system/core/Security.php中的xss_clean()方法</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">/**</span></span>
<span class="line"><span style="color:#babed8;">	 * XSS Clean</span></span>
<span class="line"><span style="color:#babed8;">	 *</span></span>
<span class="line"><span style="color:#babed8;">	 * Sanitizes data so that Cross Site Scripting Hacks can be</span></span>
<span class="line"><span style="color:#babed8;">	 * prevented.  This function does a fair amount of work but</span></span>
<span class="line"><span style="color:#babed8;">	 * it is extremely thorough, designed to prevent even the</span></span>
<span class="line"><span style="color:#babed8;">	 * most obscure XSS attempts.  Nothing is ever 100% foolproof,</span></span>
<span class="line"><span style="color:#babed8;">	 * of course, but I haven&#39;t been able to get anything passed</span></span>
<span class="line"><span style="color:#babed8;">	 * the filter.</span></span>
<span class="line"><span style="color:#babed8;">	 *</span></span>
<span class="line"><span style="color:#babed8;">	 * Note: This function should only be used to deal with data</span></span>
<span class="line"><span style="color:#babed8;">	 * upon submission.  It&#39;s not something that should</span></span>
<span class="line"><span style="color:#babed8;">	 * be used for general runtime processing.</span></span>
<span class="line"><span style="color:#babed8;">	 *</span></span>
<span class="line"><span style="color:#babed8;">	 * This function was based in part on some code and ideas I</span></span>
<span class="line"><span style="color:#babed8;">	 * got from Bitflux: http://channel.bitflux.ch/wiki/XSS_Prevention</span></span>
<span class="line"><span style="color:#babed8;">	 *</span></span>
<span class="line"><span style="color:#babed8;">	 * To help develop this script I used this great list of</span></span>
<span class="line"><span style="color:#babed8;">	 * vulnerabilities along with a few other hacks I&#39;ve</span></span>
<span class="line"><span style="color:#babed8;">	 * harvested from examining vulnerabilities in other programs:</span></span>
<span class="line"><span style="color:#babed8;">	 * http://ha.ckers.org/xss.html</span></span>
<span class="line"><span style="color:#babed8;">	 *</span></span>
<span class="line"><span style="color:#babed8;">	 * @param	mixed	string or array</span></span>
<span class="line"><span style="color:#babed8;">	 * @param 	bool</span></span>
<span class="line"><span style="color:#babed8;">	 * @return	string</span></span>
<span class="line"><span style="color:#babed8;">	 */</span></span>
<span class="line"><span style="color:#babed8;">	public function xss_clean($str, $is_image = FALSE)</span></span>
<span class="line"><span style="color:#babed8;">	{</span></span>
<span class="line"><span style="color:#babed8;">		...</span></span>
<span class="line"><span style="color:#babed8;">	}</span></span></code></pre></div><p>这个函数很复杂，一共202行代码，做了将近20次处理，一个一个看太浪费时间，于是打了很多log，进一步缩小影响范围，最后定位到是下面的处理有问题：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">// Remove evil attributes such as style, onclick and xmlns</span></span>
<span class="line"><span style="color:#babed8;">	$str = $this-&gt;_remove_evil_attributes($str, $is_image);</span></span></code></pre></div><p>_remove_evil_attributes这个函数大概就是去除比较危险的字符，源码如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">/*</span></span>
<span class="line"><span style="color:#babed8;">	 * Remove Evil HTML Attributes (like evenhandlers and style)</span></span>
<span class="line"><span style="color:#babed8;">	 *</span></span>
<span class="line"><span style="color:#babed8;">	 * It removes the evil attribute and either:</span></span>
<span class="line"><span style="color:#babed8;">	 * 	- Everything up until a space</span></span>
<span class="line"><span style="color:#babed8;">	 *		For example, everything between the pipes:</span></span>
<span class="line"><span style="color:#babed8;">	 *		&lt;a |style=document.write(&#39;hello&#39;);alert(&#39;world&#39;);| class=link&gt;</span></span>
<span class="line"><span style="color:#babed8;">	 * 	- Everything inside the quotes</span></span>
<span class="line"><span style="color:#babed8;">	 *		For example, everything between the pipes:</span></span>
<span class="line"><span style="color:#babed8;">	 *		&lt;a |style=&quot;document.write(&#39;hello&#39;); alert(&#39;world&#39;);&quot;| class=&quot;link&quot;&gt;</span></span>
<span class="line"><span style="color:#babed8;">	 *</span></span>
<span class="line"><span style="color:#babed8;">	 * @param string $str The string to check</span></span>
<span class="line"><span style="color:#babed8;">	 * @param boolean $is_image TRUE if this is an image</span></span>
<span class="line"><span style="color:#babed8;">	 * @return string The string with the evil attributes removed</span></span>
<span class="line"><span style="color:#babed8;">	 */</span></span>
<span class="line"><span style="color:#babed8;">	protected function _remove_evil_attributes($str, $is_image)</span></span>
<span class="line"><span style="color:#babed8;">	{</span></span>
<span class="line"><span style="color:#babed8;">		// All javascript event handlers (e.g. onload, onclick, onmouseover), style, and xmlns</span></span>
<span class="line"><span style="color:#babed8;">		$evil_attributes = array(&#39;on\\w*&#39;, &#39;style&#39;, &#39;xmlns&#39;, &#39;formaction&#39;);</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">		if ($is_image === TRUE)</span></span>
<span class="line"><span style="color:#babed8;">		{</span></span>
<span class="line"><span style="color:#babed8;">			/*</span></span>
<span class="line"><span style="color:#babed8;">			 * Adobe Photoshop puts XML metadata into JFIF images, </span></span>
<span class="line"><span style="color:#babed8;">			 * including namespacing, so we have to allow this for images.</span></span>
<span class="line"><span style="color:#babed8;">			 */</span></span>
<span class="line"><span style="color:#babed8;">			unset($evil_attributes[array_search(&#39;xmlns&#39;, $evil_attributes)]);</span></span>
<span class="line"><span style="color:#babed8;">		}</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">		do {</span></span>
<span class="line"><span style="color:#babed8;">			$count = 0;</span></span>
<span class="line"><span style="color:#babed8;">			$attribs = array();</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">			// find occurrences of illegal attribute strings with quotes (042 and 047 are octal quotes)</span></span>
<span class="line"><span style="color:#babed8;">			preg_match_all(&#39;/(&#39;.implode(&#39;|&#39;, $evil_attributes).&#39;)\\s*=\\s*(\\042|\\047)([^\\\\2]*?)(\\\\2)/is&#39;, $str, $matches, PREG_SET_ORDER);</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">			foreach ($matches as $attr)</span></span>
<span class="line"><span style="color:#babed8;">			{</span></span>
<span class="line"><span style="color:#babed8;">				$attribs[] = preg_quote($attr[0], &#39;/&#39;);</span></span>
<span class="line"><span style="color:#babed8;">			}</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">			// find occurrences of illegal attribute strings without quotes</span></span>
<span class="line"><span style="color:#babed8;">			preg_match_all(&#39;/(&#39;.implode(&#39;|&#39;, $evil_attributes).&#39;)\\s*=\\s*([^\\s&gt;]*)/is&#39;, $str, $matches, PREG_SET_ORDER);</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">			foreach ($matches as $attr)</span></span>
<span class="line"><span style="color:#babed8;">			{</span></span>
<span class="line"><span style="color:#babed8;">				$attribs[] = preg_quote($attr[0], &#39;/&#39;);</span></span>
<span class="line"><span style="color:#babed8;">			}</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">			// replace illegal attribute strings that are inside an html tag</span></span>
<span class="line"><span style="color:#babed8;">			if (count($attribs) &gt; 0)</span></span>
<span class="line"><span style="color:#babed8;">			{</span></span>
<span class="line"><span style="color:#babed8;">				$str = preg_replace(&#39;/(&lt;?)(\\/?[^&gt;&lt;]+?)([^A-Za-z&lt;&gt;\\-])(.*?)(&#39;.implode(&#39;|&#39;, $attribs).&#39;)(.*?)([\\s&gt;&lt;]?)([&gt;&lt;]*)/i&#39;, &#39;$1$2 $4$6$7$8&#39;, $str, -1, $count);</span></span>
<span class="line"><span style="color:#babed8;">			}</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">		} while ($count);</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">		return $str;</span></span>
<span class="line"><span style="color:#babed8;">	}</span></span></code></pre></div><p>进一步定位发现是以下正则表达式的锅：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$str = preg_replace(&#39;/(&lt;?)(\\/?[^&gt;&lt;]+?)([^A-Za-z&lt;&gt;\\-])(.*?)(&#39;.implode(&#39;|&#39;, $attribs).&#39;)(.*?)([\\s&gt;&lt;]?)([&gt;&lt;]*)/i&#39;, &#39;$1$2 $4$6$7$8&#39;, $str, -1, $count);</span></span></code></pre></div><p>正常的情况下是不会执行这一行代码的，因为$attribs是空的</p><p>所以本质上还是以下的正则有问题：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">preg_match_all(&#39;/(&#39;.implode(&#39;|&#39;, $evil_attributes).&#39;)\\s*=\\s*([^\\s&gt;]*)/is&#39;, $str, $matches, PREG_SET_ORDER);</span></span></code></pre></div><p>其中$evil_attributes为：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">// All javascript event handlers (e.g. onload, onclick, onmouseover), style, and xmlns</span></span>
<span class="line"><span style="color:#babed8;">		$evil_attributes = array(&#39;on\\w*&#39;, &#39;style&#39;, &#39;xmlns&#39;, &#39;formaction&#39;);</span></span></code></pre></div><p>这个正则有什么问题呢？</p><h3 id="_5-正则的锅" tabindex="-1">5.正则的锅 <a class="header-anchor" href="#_5-正则的锅" aria-label="Permalink to &quot;5.正则的锅&quot;">​</a></h3><p>将里面的$evil_attributes和$str两个变量替换掉，得到正则pattern：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">/(on\\w*|style|xmlns|formaction)\\s*=\\s*([^\\s&gt;]*)/is</span></span></code></pre></div><p>出错的字符串：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">N2ZmODMyOWZhOWQ0MzIwNDI1OTZmMTBiOTBhZTUzOTh80JjQn1/QlNCy0L7RgNC90LjQul/QoNC10LrQstC40LfQuNGC0YsuZG9jeA==</span></span></code></pre></div><p>经过正则之后得到的$matches：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">[[&quot;oNC10LrQstC40LfQuNGC0YsuZG9jeA==&quot;,&quot;oNC10LrQstC40LfQuNGC0YsuZG9jeA&quot;,&quot;=&quot;]]</span></span></code></pre></div><p>得到的$attribs：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">[&quot;oNC10LrQstC40LfQuNGC0YsuZG9jeA\\\\=\\\\=&quot;]</span></span></code></pre></div><p>最后得到的$str：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">N ZmODMyOWZhOWQ0MzIwNDI1OTZmMTBiOTBhZTUzOTh80JjQn1/QlNCy0L7RgNC90LjQul/Q</span></span></code></pre></div><p>这个错误的字符就这样被错误地存入数据库里，导致文件无法下载。</p><p>问题终于找到了，一句话解释该问题：</p><blockquote><p>如果CI框架的post()方法的第二个参数设为TRUE（用来防止xss攻击），那么CI框架内部会把获取到的字符串进行一系列安全处理，其中有一步是为了防止JavaScript中的事件处理方法（如：onclick、onload等）而做的处理，而在本次出现的个案中，用户上传的俄罗斯语命名的文件（ИП_Дворник_Реквизиты.docx），经过转码之后的字符串（N2ZmODMyOWZhOWQ0MzIwNDI1OTZmMTBiOTBhZTUzOTh80JjQn1/QlNCy0L7RgNC90LjQul/QoNC10LrQstC40LfQuNGC0YsuZG9jeA==）正好命中这条正则表达式，被错误地处理，所以导致文件无法下载。</p></blockquote>`,80);function c(r,d,b,u,h,y){const s=n("EditInfo");return e(),t("div",null,[i,l(s,{time:"2019-01-17 16:53",title:"阅读(562) 评论(0) 推荐(0)"})])}const _=a(o,[["render",c]]);export{g as __pageData,_ as default};
