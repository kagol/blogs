import{_ as a,B as l,o as n,c as p,G as e,Q as o}from"./chunks/framework.1fee3549.js";const t="/blogs/assets/quill-basic-1.png",c="/blogs/assets/quill-basic-2.gif",i="/blogs/assets/quill-basic-3.png",r="/blogs/assets/quill-basic-4.png",d="/blogs/assets/quill-basic-5.png",y="/blogs/assets/quill-basic-6.gif",b="/blogs/assets/quill-basic-7.png",D="/blogs/assets/quill-basic-8.gif",u="/blogs/assets/quill-basic-9.png",F="/blogs/assets/quill-basic-10.png",h="/blogs/assets/quill-basic-11.png",g="/blogs/assets/quill-basic-12.png",B="/blogs/assets/quill-basic-13.png",m="/blogs/assets/quill-basic-14.png",w=JSON.parse('{"title":"深入浅出Quill：Quill基本使用和配置","description":"","frontmatter":{},"headers":[],"relativePath":"tech/2021/quill-basic.md","filePath":"tech/2021/quill-basic.md"}'),E={name:"tech/2021/quill-basic.md"},A=o(`<h1 id="深入浅出quill-quill基本使用和配置" tabindex="-1">深入浅出Quill：Quill基本使用和配置 <a class="header-anchor" href="#深入浅出quill-quill基本使用和配置" aria-label="Permalink to &quot;深入浅出Quill：Quill基本使用和配置&quot;">​</a></h1><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p><a href="https://quilljs.com/" target="_blank" rel="noreferrer">Quill</a> 是一款 API 驱动、支持格式和模块定制的开源 Web 富文本编辑器，目前在 GitHub 的 Star 数是 38k。</p><p>深入浅出 Quill 系列打算按照<code>使用</code> -&gt; <code>原理</code> -&gt; <code>实践</code>的思路去讲 Quill 富文本编辑器，主要分成以下7篇。</p><ul><li>深入浅出 Quill 系列之使用篇1：Quill 基本使用和配置</li><li>深入浅出 Quill 系列之使用篇2：通过 Quill API 实现对编辑器内容的完全控制</li><li>深入浅出 Quill 系列之原理篇1：现代富文本编辑器 Quill 的模块化机制</li><li>深入浅出 Quill 系列之原理篇2：现代富文本编辑器 Quill 的内容渲染机制</li><li>深入浅出 Quill 系列之实践篇1：如何将龙插入到编辑器中？</li><li>深入浅出 Quill 系列之实践篇2：整个贪吃蛇游戏到编辑器里玩儿吧</li><li>深入浅出 Quill 系列之选型篇：Quill 富文本编辑器的实践</li></ul><p>本文是第1篇，我们先从 Quill 的基本使用开始吧！</p><h2 id="_1-极简方式使用-quill" tabindex="-1">1 极简方式使用 Quill <a class="header-anchor" href="#_1-极简方式使用-quill" aria-label="Permalink to &quot;1 极简方式使用 Quill&quot;">​</a></h2><p>快速开始三部曲：</p><ul><li>安装</li><li>引入</li><li>使用</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">// 安装</span></span>
<span class="line"><span style="color:#babed8;">npm i quill</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&lt;div id=&quot;editor&quot;&gt;&lt;/div&gt;</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">// 引入</span></span>
<span class="line"><span style="color:#babed8;">import Quill from &#39;quill&#39;;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">// 使用</span></span>
<span class="line"><span style="color:#babed8;">const quill = new Quill(&#39;#editor&#39;);</span></span></code></pre></div><p>虽然我们已经初始化了 Quill 实例，但是在页面中却什么也看不到。</p><p><img src="`+t+'" alt="BaseEditor.png"></p><p>虽然看上去什么也没有，但是我们点击空白处，会发现有一个光标，并且可以输入内容，并给内容增加格式（由于没有工具栏，只能通过 Quill 快捷键<code>Ctrl+B</code>增加格式），以下是动画效果：</p><p><img src="'+c+'" alt="Quill 快速开始.gif"></p><p>虽然只是一个极简版的富文本编辑器，不过加上边框和按钮，就是一个基础版的掘金评论框（还差插入表情和图片）😜</p><p><img src="'+i+`" alt="基本样式.png"></p><p>这是使用 Quill 最简单的方式。</p><h2 id="_2-加一些配置选项吧" tabindex="-1">2 加一些配置选项吧 <a class="header-anchor" href="#_2-加一些配置选项吧" aria-label="Permalink to &quot;2 加一些配置选项吧&quot;">​</a></h2><h3 id="_2-1-配置编辑器容器元素-container" tabindex="-1">2.1 配置编辑器容器元素 container <a class="header-anchor" href="#_2-1-配置编辑器容器元素-container" aria-label="Permalink to &quot;2.1 配置编辑器容器元素 container&quot;">​</a></h3><p>Quill 类一共有两个参数，第一个参数是必选的编辑器容器元素<code>container</code>，可以是一个CSS选择器，比如前面的<code>#editor</code>，也可以是一个DOM元素，比如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const container = document.getElementById(&#39;editor&#39;);</span></span>
<span class="line"><span style="color:#babed8;">// const container = document.querySelector(&#39;#editor&#39;);</span></span>
<span class="line"><span style="color:#babed8;">// const container = $(&#39;#editor&#39;).get(0);</span></span>
<span class="line"><span style="color:#babed8;">const quill = new Quill(container);</span></span></code></pre></div><p>如果容器里面已经有一些 HTML 元素，那么初始化 Quill 的时候，那些元素也会渲染出来，比如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&lt;div id=&quot;editor&quot;&gt;</span></span>
<span class="line"><span style="color:#babed8;">  &lt;p&gt;Quill: An API Driven Rich Text Editor&lt;/p&gt;</span></span>
<span class="line"><span style="color:#babed8;">  &lt;h2&gt;BUILT FOR DEVELOPERS&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#babed8;">  &lt;p&gt;Granular access to the editor&#39;s content, changes and events through a simple API. Works consistently and deterministically with JSON as both input and output.&lt;/p&gt;</span></span>
<span class="line"><span style="color:#babed8;">  &lt;h2&gt;CROSS PLATFORM&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#babed8;">  &lt;p&gt;Supports all modern browsers on desktops, tablets and phones. Experience the same consistent behavior and produced HTML across platforms.&lt;/p&gt;</span></span>
<span class="line"><span style="color:#babed8;">  &lt;h2&gt;FITS LIKE A GLOVE&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#babed8;">  &lt;p&gt;Used in small projects and giant Fortune 500s alike. Start simple with the Quill core then easily customize or add your own extensions later if your product needs grow.&lt;/p&gt;</span></span>
<span class="line"><span style="color:#babed8;">&lt;/div&gt;</span></span></code></pre></div><p>渲染出来的编辑器效果：</p><p><img src="`+r+`" alt="渲染初始HTML.png"></p><h3 id="_2-2-配置选项-options" tabindex="-1">2.2 配置选项 options <a class="header-anchor" href="#_2-2-配置选项-options" aria-label="Permalink to &quot;2.2 配置选项 options&quot;">​</a></h3><p>第二个参数是可选的配置选项<code>options</code>，options是一个JSON对象，比如我们想给我们的编辑器增加一个主题，使它不再那么单调。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const quill = new Quill(&#39;#editor&#39;, {</span></span>
<span class="line"><span style="color:#babed8;">  theme: &#39;snow&#39;</span></span>
<span class="line"><span style="color:#babed8;">});</span></span></code></pre></div><p>另外需要引入该主题对应的样式：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">@import &#39;quill/dist/quill.snow.css&#39;;</span></span></code></pre></div><p>这时我们看到编辑器已经有一个工具栏。</p><p><img src="`+d+'" alt="工具栏.png"></p><p>并且可以通过工具栏对编辑器的内容进行操作，比如给<code>Quill</code>增加一个超链接：</p><p><img src="'+y+`" alt="超链接.gif"></p><p>除了<code>snow</code>主题，Quill 还内置了一个<code>bubble</code>气泡主题，配置方式和<code>snow</code>主题一样：</p><ul><li>引入主题样式</li><li>在options里配置主题</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">// 引入bubble主题样式</span></span>
<span class="line"><span style="color:#babed8;">@import &#39;quill/dist/quill.bubble.css&#39;;</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const quill = new Quill(&#39;#editor&#39;, {</span></span>
<span class="line"><span style="color:#babed8;">  theme: &#39;bubble&#39; // 配置 bubble 主题</span></span>
<span class="line"><span style="color:#babed8;">});</span></span></code></pre></div><p>效果如下：</p><p><img src="`+b+'" alt="bubble主题.png"></p><p>bubble主题没有显性的工具栏，它会在你选中编辑器中的文本时，在选中文本的下方显示一个气泡工具栏，从而对文本进行格式化操作，比如给选中的段落增加引用格式：</p><p><img src="'+D+`" alt="bubble.gif"></p><h2 id="_3-更多配置选项" tabindex="-1">3 更多配置选项 <a class="header-anchor" href="#_3-更多配置选项" aria-label="Permalink to &quot;3 更多配置选项&quot;">​</a></h2><p>Quill 不仅仅可以配置主题，options一共支持8个配置选项：</p><ul><li>bounds 编辑器内浮框的边界</li><li>debug debug级别</li><li>formats 格式白名单</li><li>modules 模块</li><li>placeholder 占位文本</li><li>readOnly 只读模式</li><li>scrollingContainer 滚动容器</li><li>theme 主题</li></ul><h3 id="_3-1-formats-格式白名单" tabindex="-1">3.1 formats 格式白名单 <a class="header-anchor" href="#_3-1-formats-格式白名单" aria-label="Permalink to &quot;3.1 formats 格式白名单&quot;">​</a></h3><p>这个配置项非常有用，比如刚刚提到的掘金评论框，我们发现评论框里只能插入纯文本，其他格式都不允许，即使时粘贴进来的格式化文本也会变成纯文本。</p><p>在 Quill 里很容易实现，只需要配置<code>formats</code>为空数组即可。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const quill = new Quill(&#39;#editor&#39;, {</span></span>
<span class="line"><span style="color:#babed8;">  theme: &#39;snow&#39;,</span></span>
<span class="line"><span style="color:#babed8;">  formats: []</span></span>
<span class="line"><span style="color:#babed8;">});</span></span></code></pre></div><p>注意这里的<code>formats</code>格式白名单，控制的是内容实际的格式，和设置格式的渠道无关，比如<code>formats</code>设置为空，那么无论是：</p><ul><li>通过工具栏设置格式</li><li>还是通过快捷键（比如<code>Ctrl+B</code>）设置格式</li><li>亦或是粘贴带格式的文本</li></ul><p>都是无法设置格式的。</p><p>如果我们想保留一部分格式，比如只保留<code>粗体</code>和<code>列表</code>两种格式：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const quill = new Quill(&#39;#editor&#39;, {</span></span>
<span class="line"><span style="color:#babed8;">  theme: &#39;snow&#39;,</span></span>
<span class="line"><span style="color:#babed8;">  formats: [ &#39;bold&#39;, &#39;list&#39; ]</span></span>
<span class="line"><span style="color:#babed8;">});</span></span></code></pre></div><p>Quill 一共支持<code>11</code>种行内格式：</p><ul><li>background</li><li>bold</li><li>color</li><li>font</li><li>code</li><li>italic</li><li>link</li><li>size</li><li>strike</li><li>script</li><li>underline</li></ul><p><code>7</code>种块级格式：</p><ul><li>blockquote</li><li>header</li><li>indent</li><li>list</li><li>align</li><li>direction</li><li>code-block</li></ul><p><code>3</code>种嵌入格式：</p><ul><li>formula</li><li>image</li><li>video</li></ul><p>不配置<code>formats</code>选项，会默认支持所有的<code>21</code>种格式。</p><h3 id="_3-2-placeholder-占位文本" tabindex="-1">3.2 placeholder 占位文本 <a class="header-anchor" href="#_3-2-placeholder-占位文本" aria-label="Permalink to &quot;3.2 placeholder 占位文本&quot;">​</a></h3><p>我们发现掘金的评论框在没有输入内容时，会有一个<code>平等表达，友善交流</code>的占位文本。</p><p><img src="`+u+`" alt="掘金评论框.png"></p><p>这可以很容易地通过配置<code>placeholder</code>选项实现。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const quill = new Quill(&#39;#editor&#39;, {</span></span>
<span class="line"><span style="color:#babed8;">  formats: [],</span></span>
<span class="line"><span style="color:#babed8;">  placeholder: &#39;平等表达，友善交流&#39;,</span></span>
<span class="line"><span style="color:#babed8;">});</span></span></code></pre></div><p><img src="`+F+`" alt="placeholder.png"></p><h3 id="_3-3-readonly-只读模式" tabindex="-1">3.3 readOnly 只读模式 <a class="header-anchor" href="#_3-3-readonly-只读模式" aria-label="Permalink to &quot;3.3 readOnly 只读模式&quot;">​</a></h3><p>通过配置<code>readOnly</code>可以实现：</p><blockquote><p>初始状态编辑器是阅读态，不可以编辑，可以通过点击<code>编辑</code>按钮让编辑器变成编辑态。</p></blockquote><h3 id="_3-4-modules-模块配置" tabindex="-1">3.4 modules 模块配置 <a class="header-anchor" href="#_3-4-modules-模块配置" aria-label="Permalink to &quot;3.4 modules 模块配置&quot;">​</a></h3><p>这个配置项放在最后并不代表它不重要，恰恰相反，这是 Quill 中<code>最重量级</code>也是<code>最常用</code>的配置。</p><p>Quill 一共有6个内置模块：</p><ul><li>Clipboard 粘贴版</li><li>History 操作历史</li><li>Keyboard 键盘事件</li><li>Syntax 语法高亮</li><li>Toolbar 工具栏</li><li>Uploader 文件上传</li></ul><p>每个模块的用途详见<a href="https://juejin.cn/post/6844904073620094990#heading-3" target="_blank" rel="noreferrer">Quill内置模块</a>章节。</p><p><code>modules</code>选项可以用来配置这些模块。</p><p>在后面原理篇的文章中，我也会给大家详细介绍 Quill 模块的工作原理，敬请期待！</p><h4 id="_3-4-1-配置-toolbar-模块" tabindex="-1">3.4.1 配置 toolbar 模块 <a class="header-anchor" href="#_3-4-1-配置-toolbar-模块" aria-label="Permalink to &quot;3.4.1 配置 toolbar 模块&quot;">​</a></h4><p>Quill 默认只在工具栏中显示一部分格式化按钮，里面没有插入图片的按钮，我们可以通过配置<code>toolbar</code>模块来增加。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const quill = new Quill(&#39;#editor&#39;, {</span></span>
<span class="line"><span style="color:#babed8;">  theme: &#39;snow&#39;,</span></span>
<span class="line"><span style="color:#babed8;">  modules: {</span></span>
<span class="line"><span style="color:#babed8;">    toolbar: [</span></span>
<span class="line"><span style="color:#babed8;">      // 默认的</span></span>
<span class="line"><span style="color:#babed8;">      [{ header: [1, 2, 3, false] }],</span></span>
<span class="line"><span style="color:#babed8;">      [&#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;link&#39;],</span></span>
<span class="line"><span style="color:#babed8;">      [{ list: &#39;ordered&#39;}, { list: &#39;bullet&#39; }],</span></span>
<span class="line"><span style="color:#babed8;">      [&#39;clean&#39;],</span></span>
<span class="line"><span style="color:#babed8;">      </span></span>
<span class="line"><span style="color:#babed8;">       // 新增的</span></span>
<span class="line"><span style="color:#babed8;">      [&#39;image&#39;]</span></span>
<span class="line"><span style="color:#babed8;">    ]</span></span>
<span class="line"><span style="color:#babed8;">  }</span></span>
<span class="line"><span style="color:#babed8;">});</span></span></code></pre></div><p><img src="`+h+'" alt="image.png"></p><p>如果想做一个掘金这样的编辑器，也非常简单。</p><p><img src="'+g+`" alt="掘金编辑器.png"></p><p>掘金的富文本编辑器主要包含以下工具栏按钮：</p><ul><li>标题</li><li>加粗</li><li>斜体</li><li>引用</li><li>超链接</li><li>插入图片</li><li>插入视频</li><li>行内代码</li><li>代码块</li><li>无序列表</li><li>有序列表</li><li>删除线</li><li>对齐方式</li><li>公式</li></ul><blockquote><p>有些掘金编辑器的功能，Quill 是没有的，所以没展示出来。</p></blockquote><p>使用 Quill 实现，需要这样配置<code>toolbar</code>模块。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const quill = new Quill(&#39;#editor&#39;, {</span></span>
<span class="line"><span style="color:#babed8;">  theme: &#39;snow&#39;,</span></span>
<span class="line"><span style="color:#babed8;">  modules: {</span></span>
<span class="line"><span style="color:#babed8;">    toolbar: [</span></span>
<span class="line"><span style="color:#babed8;">      { header: [1, 2, 3, 4, 5, 6, false] }, // 标题</span></span>
<span class="line"><span style="color:#babed8;">      &#39;bold&#39;,             // 加粗</span></span>
<span class="line"><span style="color:#babed8;">      &#39;italic&#39;,           // 斜体</span></span>
<span class="line"><span style="color:#babed8;">      &#39;blockquote&#39;,       // 引用</span></span>
<span class="line"><span style="color:#babed8;">      &#39;link&#39;,             // 超链接</span></span>
<span class="line"><span style="color:#babed8;">      &#39;image&#39;,            // 插入图片</span></span>
<span class="line"><span style="color:#babed8;">      &#39;video&#39;,            // 插入视频</span></span>
<span class="line"><span style="color:#babed8;">      &#39;code&#39;,             // 行内代码</span></span>
<span class="line"><span style="color:#babed8;">      &#39;code-block&#39;,       // 代码块</span></span>
<span class="line"><span style="color:#babed8;">      { list: &#39;bullet&#39; }, // 无序列表</span></span>
<span class="line"><span style="color:#babed8;">      { list: &#39;ordered&#39;}, // 有序列表</span></span>
<span class="line"><span style="color:#babed8;">      &#39;strike&#39;,           // 删除线</span></span>
<span class="line"><span style="color:#babed8;">      { &#39;align&#39;: [] },    // 对齐方式</span></span>
<span class="line"><span style="color:#babed8;">      &#39;formula&#39;           // 公式</span></span>
<span class="line"><span style="color:#babed8;">    ]</span></span>
<span class="line"><span style="color:#babed8;">  }</span></span>
<span class="line"><span style="color:#babed8;">});</span></span></code></pre></div><p>稍微修改下样式，就能做出一个和掘金富文本编辑器差不多的富文本编辑器啦，效果如下：</p><p><img src="`+B+'" alt="掘金编辑器 - Quill.png"></p><p>以下是和掘金实际的富文本编辑器的对比图：</p><p><img src="'+m+`" alt="对比图.png"></p><p>对比以上效果对比图，除了工具栏的 icon 有差异之外，其他几乎是一样的。</p><h4 id="_3-4-2-配置-keyboard-模块" tabindex="-1">3.4.2 配置 keyboard 模块 <a class="header-anchor" href="#_3-4-2-配置-keyboard-模块" aria-label="Permalink to &quot;3.4.2 配置 keyboard 模块&quot;">​</a></h4><p>除了工具栏模块，我们还可以配置别的模块，比如快捷键模块<code>keyboard</code>，<code>keyboard</code>模块默认支持很多快捷键，比如：</p><ul><li>加粗的快捷键是<code>Ctrl+B</code>；</li><li>超链接的快捷键是<code>Ctrl+K</code>;</li><li>撤销/回退的快捷键是<code>Ctrl+Z/Y</code>。</li></ul><p>但它不支持删除线的快捷键，如果我们想定制删除线的快捷键，假设是<code>Ctrl+Shift+S</code>，可以这样配置：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const quill = new Quill(&#39;#editor&#39;, {</span></span>
<span class="line"><span style="color:#babed8;">  theme: &#39;snow&#39;,</span></span>
<span class="line"><span style="color:#babed8;">  modules: {</span></span>
<span class="line"><span style="color:#babed8;">    toolbar: [</span></span>
<span class="line"><span style="color:#babed8;">      // 默认的</span></span>
<span class="line"><span style="color:#babed8;">      [{ header: [1, 2, 3, false] }],</span></span>
<span class="line"><span style="color:#babed8;">      [&#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;link&#39;],</span></span>
<span class="line"><span style="color:#babed8;">      [{ list: &#39;ordered&#39;}, { list: &#39;bullet&#39; }],</span></span>
<span class="line"><span style="color:#babed8;">      [&#39;clean&#39;],</span></span>
<span class="line"><span style="color:#babed8;">      [&#39;image&#39;]</span></span>
<span class="line"><span style="color:#babed8;">    ],</span></span>
<span class="line"><span style="color:#babed8;">    </span></span>
<span class="line"><span style="color:#babed8;">    // 新增的</span></span>
<span class="line"><span style="color:#babed8;">    keyboard: {</span></span>
<span class="line"><span style="color:#babed8;">      bindings: {</span></span>
<span class="line"><span style="color:#babed8;">        strike: {</span></span>
<span class="line"><span style="color:#babed8;">          key: &#39;S&#39;,</span></span>
<span class="line"><span style="color:#babed8;">          ctrlKey: true,</span></span>
<span class="line"><span style="color:#babed8;">          shiftKey: true,</span></span>
<span class="line"><span style="color:#babed8;">          handler: function(range, context) {</span></span>
<span class="line"><span style="color:#babed8;">            // 获取当前光标所在文本的格式</span></span>
<span class="line"><span style="color:#babed8;">            const format = this.quill.getFormat(range);</span></span>
<span class="line"><span style="color:#babed8;">            // 增加/取消删除线</span></span>
<span class="line"><span style="color:#babed8;">            this.quill.format(&#39;strike&#39;, !format.strike);</span></span>
<span class="line"><span style="color:#babed8;">          }</span></span>
<span class="line"><span style="color:#babed8;">        },</span></span>
<span class="line"><span style="color:#babed8;">      }</span></span>
<span class="line"><span style="color:#babed8;">    },</span></span>
<span class="line"><span style="color:#babed8;">  }</span></span>
<span class="line"><span style="color:#babed8;">});</span></span></code></pre></div><h4 id="_3-4-3-配置-history-模块" tabindex="-1">3.4.3 配置 history 模块 <a class="header-anchor" href="#_3-4-3-配置-history-模块" aria-label="Permalink to &quot;3.4.3 配置 history 模块&quot;">​</a></h4><p>Quill 内置的<code>history</code>模块，每隔<code>1s</code>会记录一次操作历史，并放入历史操作栈（最大100）中，便于撤销/回退操作。</p><p>如果我们不想记录得那么频繁，想<code>2s</code>记录一次，另外我们想增加操作栈的大小，最大记录200次操作历史，可以这样配置：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> quill </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Quill</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#editor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">theme</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">snow</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">modules</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">toolbar</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 默认的</span></span>
<span class="line"><span style="color:#BABED8;">      [</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">header</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bold</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">italic</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">underline</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">link</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      [</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">list</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ordered</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">list</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bullet</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">clean</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">image</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#BABED8;">    ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">keyboard</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">bindings</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">strike</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">S</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">ctrlKey</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">shiftKey</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#82AAFF;">handler</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">range</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">context</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 获取当前光标所在文本的格式</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">format</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">quill</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getFormat</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">range</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 增加/取消删除线</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">quill</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">format</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">strike</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">format</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">strike</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 新增的</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">history</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">delay</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 2s记录一次操作历史</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">maxStack</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 最大记录200次操作历史</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>本文主要介绍了 Quill 的基本用法，以及如何通过 options 选项配置 Quill，options 包含丰富的选项，可以快速配置出一个掘金文章编辑器。</p><p>Quill 是一个 API 驱动的富文本编辑器，下篇我将给大家介绍更加丰富的 Quill API，如何通过 Quill API 操纵编辑器内容。</p>`,107);function q(_,f,C,k,Q,v){const s=l("EditInfo");return n(),p("div",null,[A,e(s,{time:"2021年06月21日 07:34",title:"阅读 5091 ·  点赞 29 ·  评论 8 ·  收藏 45"})])}const x=a(E,[["render",q]]);export{w as __pageData,x as default};
