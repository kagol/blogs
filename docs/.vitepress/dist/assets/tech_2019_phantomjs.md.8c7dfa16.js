import{_ as t,B as p,o as n,c as s,a as e,G as l,k as a,Q as r}from"./chunks/framework.1fee3549.js";const T=JSON.parse('{"title":"[BUGCASE]Phantom服务代码不健壮导致无法发送报表邮件","description":"","frontmatter":{},"headers":[],"relativePath":"tech/2019/phantomjs.md","filePath":"tech/2019/phantomjs.md"}'),c={name:"tech/2019/phantomjs.md"},h=a("h1",{id:"bugcase-phantom服务代码不健壮导致无法发送报表邮件",tabindex:"-1"},[e("[BUGCASE]Phantom服务代码不健壮导致无法发送报表邮件 "),a("a",{class:"header-anchor",href:"#bugcase-phantom服务代码不健壮导致无法发送报表邮件","aria-label":'Permalink to "[BUGCASE]Phantom服务代码不健壮导致无法发送报表邮件"'},"​")],-1),i=a("h2",{id:"一、问题描述",tabindex:"-1"},[e("一、问题描述 "),a("a",{class:"header-anchor",href:"#一、问题描述","aria-label":'Permalink to "一、问题描述"'},"​")],-1),d=a("p",null,[e("广告平台中的发报表邮件功能偶尔会出现发送失败的情况，重启phantom服务之后就好了 查看phantom服务的日志发现，在"),a("code",null,"2017-12-12 03:29:45"),e("有访问记录，并且参数是异常的，queryJSON是"),a("code",null,"%257B"),e("，经过url decode之后发现是："),a("code",null,"{")],-1),m=a("br",null,null,-1),b=a("br",null,null,-1),u=r(`<p>不想看分析过程的话，可直接看<code>结论</code>或<code>解决方案</code></p><h2 id="二、原因分析" tabindex="-1">二、原因分析 <a class="header-anchor" href="#二、原因分析" aria-label="Permalink to &quot;二、原因分析&quot;">​</a></h2><h3 id="_1-导火线" tabindex="-1">1.导火线 <a class="header-anchor" href="#_1-导火线" aria-label="Permalink to &quot;1.导火线&quot;">​</a></h3><p>日志中的url是后台传给phantom服务的，为什么会传一个异常参数的url过来？ 很明显不是人为点击发邮件触发的，而且时间发生在凌晨，会不会是<code>安平扫描</code>？ 经过和后台同事确认，确实如此！</p><br><p>原来后台没有做session校验，所以被扫描了，导致了这个问题 <br></p><h3 id="_2-一些猜测" tabindex="-1">2.一些猜测 <a class="header-anchor" href="#_2-一些猜测" aria-label="Permalink to &quot;2.一些猜测&quot;">​</a></h3><p>可是这似乎不是根本原因 为什么安平扫描会导致phantom服务停止打日志？ 以下是一些猜测：</p><h4 id="_1-phantom服务崩溃" tabindex="-1">(1)phantom服务崩溃 <a class="header-anchor" href="#_1-phantom服务崩溃" aria-label="Permalink to &quot;(1)phantom服务崩溃&quot;">​</a></h4><p>一开始猜测是phantom服务接收到异常参数，内部报错，导致服务崩溃</p><p>这个想法立即被导师否决了，因为phantom服务的进程还在，并没有崩溃</p><h4 id="_2-运维自动重启服务的锅" tabindex="-1">(2)运维自动重启服务的锅 <a class="header-anchor" href="#_2-运维自动重启服务的锅" aria-label="Permalink to &quot;(2)运维自动重启服务的锅&quot;">​</a></h4><p>因为phantom服务接了运维这边的自动重启服务，如果进程挂了会自动拉起</p><p>会不会进程拉起的过程有问题，初始的phantom进程不再工作，又拉起了一个新进程，存在两个进程，导致无法发邮件？</p><h4 id="_3-进程僵死" tabindex="-1">(3)进程僵死 <a class="header-anchor" href="#_3-进程僵死" aria-label="Permalink to &quot;(3)进程僵死&quot;">​</a></h4><p>会不会是进程僵死了，导致进程虽然还在，实际上却不工作？</p><h4 id="_4-进程打开的文件句柄数超出限制" tabindex="-1">(4)进程打开的文件句柄数超出限制 <a class="header-anchor" href="#_4-进程打开的文件句柄数超出限制" aria-label="Permalink to &quot;(4)进程打开的文件句柄数超出限制&quot;">​</a></h4><p>会不会是进程打开的句柄数超过了限制？</p><p>由于当时急着把服务重启了，没法获取出错时的上下文环境信息</p><p>为了验证这些猜测，需要重现下这个问题，怎么重现呢？</p><p>似乎没法真正地模拟安平的扫描过程</p><p>当时有同事提供了一个解决方案： 写一个脚本定时给phantom服务发包，然后看phantom服务有没有回包，没有回包说明phantom已经停止工作了，这时把phantom的进程杀死。运维的自动拉起服务这时会拉起phantom服务，如此便可解决这个问题</p><p>听起来很有道理，怎么实施呢？</p><p>打算先试着找到根本原因吧，实在没法重现这个问题，找不到根本原因再考虑发包的方案</p><h3 id="_3-分析代码" tabindex="-1">3.分析代码 <a class="header-anchor" href="#_3-分析代码" aria-label="Permalink to &quot;3.分析代码&quot;">​</a></h3><p>于是试着从phantom的代码入手 phantom服务拿到后台传过来的url之后，会做一下事情：</p><ul><li>1.取url中的queryString</li><li>2.将queryString转化成JSON格式，并取其中的queryJSON参数的值</li><li>3.将queryJSON的值进行url解码（decodeURIComponent）</li><li>4.将解码后的queryJSON转化成JSON格式（JSON.parse）JSON.parse</li><li>5.取其中的platform参数的值</li><li>6.通过判断platform拼接出不同的targetURL</li><li>7.用phantom这个headless browser打开这个targetURL，并取其中的HTML内容</li><li>8.将这个内容传给后台服务</li></ul><p>用安平扫描的异常参数模拟一遍上面的流程，发现第4步报错，JSON.parse方法没法解析<code>{</code>左大括号</p><p>这个报错会导致程序不再往下执行，但并不会导致phantom服务不可用，下一次传入正确的参数依然可以发邮件 <br> 安平扫描有可能会连续扫描多次，会不会是这个原因呢？</p><h3 id="_4-问题重现" tabindex="-1">4.问题重现 <a class="header-anchor" href="#_4-问题重现" aria-label="Permalink to &quot;4.问题重现&quot;">​</a></h3><p>于是打算写一个脚本给phantom服务发多次带错误参数的请求：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">for ((i=1;i&lt;=100;i++));</span></span>
<span class="line"><span style="color:#babed8;">do curl -i &quot;http://ip:port/generateAdsReport?sessionid=&amp;queryJSON=%7B&quot;;</span></span>
<span class="line"><span style="color:#babed8;">done</span></span></code></pre></div><p>ip:port是phantom服务的套接字</p><p>果然重现了！</p><h3 id="_5-查看报错环境" tabindex="-1">5.查看报错环境 <a class="header-anchor" href="#_5-查看报错环境" aria-label="Permalink to &quot;5.查看报错环境&quot;">​</a></h3><p>这时就可以看上下文环境信息</p><h4 id="_1-查看进程情况" tabindex="-1">(1)查看进程情况： <a class="header-anchor" href="#_1-查看进程情况" aria-label="Permalink to &quot;(1)查看进程情况：&quot;">​</a></h4><p><code>ps -ef | grep phantom</code></p><p>并没有出现之前猜测的两个进程的情况 <br><code>ps -A -o stat,ppid,pid,cmd | grep -e &#39;^[Zz]&#39;</code></p><p>也没有变成僵尸进程</p><h4 id="_2-查看文件句柄数" tabindex="-1">(2)查看文件句柄数 <a class="header-anchor" href="#_2-查看文件句柄数" aria-label="Permalink to &quot;(2)查看文件句柄数&quot;">​</a></h4><p>查看系统默认最大句柄数（单个进程最多允许打开的最大句柄数，默认是1024） <code>ulimit -n</code><br> 查看总句柄数 <code>lsof|awk &#39;{print $2}&#39;|wc -l</code><br> 查看当前进程占用的句柄数 <code>lsof -n|awk &#39;{print $2}&#39;|sort|uniq -c|sort -nr|more</code><br></p><p>根据ID产看进程名 <code>ps aef|grep 24204</code><br> 发现并没有哪个进程超过句柄限制 <br></p><h4 id="_3-查看tcp连接数" tabindex="-1">(3)查看TCP连接数 <a class="header-anchor" href="#_3-查看tcp连接数" aria-label="Permalink to &quot;(3)查看TCP连接数&quot;">​</a></h4><p><code>netstat -nat | grep 10021</code><br><img src="https://img2018.cnblogs.com/blog/296720/201901/296720-20190117170134163-113136501.png" alt=""></p><br><p>问题慢慢浮出水面！！！ <br></p><h3 id="_6-根本原因" tabindex="-1">6.根本原因 <a class="header-anchor" href="#_6-根本原因" aria-label="Permalink to &quot;6.根本原因&quot;">​</a></h3><p>有很多状态为<code>CLOSE_WAIT</code>的TCP连接 <code>CLOSE_WAIT</code>表示等待从本地用户发来的连接中断请求 <br> 也就是说有很多TCP连接没有关闭，对照之前的phantom代码，出现报错之后，确实没有在执行任何关闭连接的代码 <br></p><p>所以根本原因还是：自己写的代码不健壮，没有捕捉异常，报错了没有及时关闭TCP连接 <br> 一句话总结问题的原因：</p><blockquote><p>由于安平的扫描，phantom服务内部将字符串转成JSON时报错，不往下执行后面的代码，也就不会关闭已经建立的TCP连接。未关闭的TCP连接积累到一定的量，超出系统的最大限制，导致phantom服务不再接收和处理之后的请求，最终导致无法发送报表邮件。</p></blockquote><h2 id="三、解决方案" tabindex="-1">三、解决方案 <a class="header-anchor" href="#三、解决方案" aria-label="Permalink to &quot;三、解决方案&quot;">​</a></h2><p>知道问题的根本原因，要解决就容易多了，使用try/catch语句将可能出错的代码包裹起来，如果报错就关闭TCP连接。 <br></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">try {</span></span>
<span class="line"><span style="color:#babed8;">    ...</span></span>
<span class="line"><span style="color:#babed8;">    var jsonParams = JSON.parse(decodedParams);//可能报错的语句</span></span>
<span class="line"><span style="color:#babed8;">    var platform = jsonParams.platform;</span></span>
<span class="line"><span style="color:#babed8;">}catch(err) {</span></span>
<span class="line"><span style="color:#babed8;">    response.close();//关闭TCP连接</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><p>------------------------------------------------20171219 更新------------------------------------------------</p><p>为了弄清楚TCP连接数的限制，在开发环境又测试了下</p><p><img src="https://img2018.cnblogs.com/blog/296720/201901/296720-20190117170151902-293533587.png" alt=""></p><p>状态为<code>CLOSE_WAIT</code>的TCP连接大概到了25个时，phantom服务就不再工作</p><p>此时phantom占用的文件句柄数是61个 <img src="https://img2018.cnblogs.com/blog/296720/201901/296720-20190117170200774-673745265.png" alt=""></p><p>实际上，phantom的最大并发连接数是10个，参考<a href="http://phantomjs.org/api/webserver/" target="_blank" rel="noreferrer">phantom官网</a></p><p>以下是来自phantom官网的截图： <img src="https://img2018.cnblogs.com/blog/296720/201901/296720-20190117170208838-744158847.png" alt=""></p><p>以下是在开发环境上测试出来的TCP连接的边界值 <img src="https://img2018.cnblogs.com/blog/296720/201901/296720-20190117170215499-1390025690.png" alt=""></p><p>之前的一句话原因总结改为：</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><blockquote><p>由于安平的扫描，phantom服务内部将字符串转成JSON时报错，不往下执行后面的代码，也就不会关闭已经建立的TCP连接。未关闭的TCP连接积累到一定的量，超出<code>phantom的最大并发连接数10个</code>（之前写的是<code>系统的最大限制</code>），导致phantom服务不再接收和处理之后的请求，最终导致无法发送报表邮件。</p></blockquote>`,65);function _(g,q,P,f,k,C){const o=p("EditInfo");return n(),s("div",null,[h,i,d,m,e(" ![](https://img2018.cnblogs.com/blog/296720/201901/296720-20190117170018751-1025403433.jpg) "),b,e(" 并且之后再进行发邮件操作，phantom不再打日志 "),u,l(o,{time:"2019-01-17 17:03",title:"阅读(259) 评论(0) 推荐(0)"})])}const y=t(c,[["render",_]]);export{T as __pageData,y as default};
