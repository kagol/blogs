import{_ as s,B as e,o as n,c as l,G as p,Q as t}from"./chunks/framework.1fee3549.js";const m=JSON.parse('{"title":"Webpack 入门：使用 Webpack 打包 Angular 项目的一个例子","description":"","frontmatter":{},"headers":[],"relativePath":"tech/2016/getting-started-with-webpack.md","filePath":"tech/2016/getting-started-with-webpack.md"}'),o={name:"tech/2016/getting-started-with-webpack.md"},c=t(`<h1 id="webpack-入门-使用-webpack-打包-angular-项目的一个例子" tabindex="-1">Webpack 入门：使用 Webpack 打包 Angular 项目的一个例子 <a class="header-anchor" href="#webpack-入门-使用-webpack-打包-angular-项目的一个例子" aria-label="Permalink to &quot;Webpack 入门：使用 Webpack 打包 Angular 项目的一个例子&quot;">​</a></h1><p>2016.1.22，对大多数人来说，这是一个非常平常的日子，但这却是我决定在博客园写博客的日子。虽然注册博客园的博客已有4年8个月，却一直没有动手写过一篇博客，原因是觉得自己水平不行，写不出好东西，所以干脆就不写。现在我觉得这样想是不对的，每个人都有一个成长的过程，从学徒到能独立完成任务，再到师傅，再到专家。我想记录这个过程，并且通过写博客养成总结的好习惯，构建自己的知识体系，同时锻炼自己的写作能力。</p><p>真正接触编程是在大一下学期(2010年初)学的C语言，而接触前端则是在大一结束后的暑假(2010年中旬)，也是在那个时候我进了学院的腾杰工作室，我编程的启蒙也是从这里开始的，当时的前端和美工是不分的，而我那时对前端的理解就是给网页写一些CSS样式，用JS写一些特效，仅此而已。当时我们是用.NET平台开发一些政府网站(如项目申报评审系统)和学校网站(人事系统)，所以对面向对象的编程思想接触的比较多，现在想来这对我之后的编程生涯还是很有帮助的。</p><p>后来工作了，放弃了.NET的开发，转向前端，最开始接触的JS库是jQuery(2006由John Resig发布)，选择jQuery是因为这是当时最流行的JS库，很多企业也要求要会使用jQuery进行开发，这段时间接触了很多jQuery的思想，jQuery主要的特点就是丰富的DOM选择器、事件操作、动画、Ajax支持、链式调用、可扩展性等，接触了很多jQuery的库，同时也加深了对原生JS的理解。jQuery对于中小型的项目确实可以做到快速开发，不过项目一大的话维护起来会比较麻烦。后来决定用Angular(2009年由Misko Hevery等人创建)，从做出基本的Demo开始，慢慢地边学边用，基本上能用上Angular开发简单的CRUD应用，不过还不能完全脱离jQuery，也没有去系统地学习Angular，后来买了一本《精通AngularJS》，打算系统地学习Angular，慢慢地了解了Angular的核心特性有：MVVM、模块化、双向数据绑定、依赖注入、指令等，并开始脱离jQuery，完全用Angular开发项目。学习Angular期间还学习了一段时间的HTML5 Canvas和Node.js(2009年由Ryan Dahl发布)，最近又在折腾Webpack前端模块加载工具，打算把这把前端利器应用到目前的项目中。所以人生中的第一篇博客就以Webpack为主题吧，闲言少述，进入正题。</p><p>---------------------------------- 华丽的分割线 -----------------------------------</p><h2 id="_1-什么是-webpack" tabindex="-1">1 什么是 Webpack <a class="header-anchor" href="#_1-什么是-webpack" aria-label="Permalink to &quot;1 什么是 Webpack&quot;">​</a></h2><p>Webpack是一个前端的模块管理工具(module bundler)，以下是webpack的官网：<a href="http://webpack.github.io/%EF%BC%8C%E4%B8%80%E8%BF%9B%E5%85%A5%E5%AE%98%E7%BD%91%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%8B%E9%9D%A2%E8%BF%99%E5%BC%A0%E5%A4%A7%E5%9B%BE%EF%BC%9A" target="_blank" rel="noreferrer">http://webpack.github.io/，一进入官网可以看到下面这张大图：</a></p><p><img src="https://user-images.githubusercontent.com/9566362/227753884-97560995-e1a9-48b8-9f25-4fe89785ac24.png" alt="image"></p><p>这张图基本上解释了webpack是用来干嘛的，将一些相互依赖的模块(文件)，打包成一个或多个js文件，减少http请求次数，提升性能。这些相互依赖的模块可以是图片、字体、coffee文件、样式文件、less文件等。</p><p>具体怎么用呢？接下来我将用一个例子来说明：</p><h2 id="_2-一个-webpack-angular-的例子" tabindex="-1">2 一个 Webpack + Angular 的例子 <a class="header-anchor" href="#_2-一个-webpack-angular-的例子" aria-label="Permalink to &quot;2 一个 Webpack + Angular 的例子&quot;">​</a></h2><p>1.先看下目录结构</p><p><img src="https://user-images.githubusercontent.com/9566362/227753875-70a8bd2c-3833-42e3-8910-2f4fc25a0ac7.png" alt="image"></p><p>2.安装Webpack及其他组件</p><p>安装Webpack之前建议先安装Node.js，然后采用npm的方式来安装Webpack：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npm install webpack -g</span></span></code></pre></div><p>因为要用到angular，所以要安装angular：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npm install angular</span></span></code></pre></div><p>还要安装一系列加载器(loader)：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npm install style-loader css-loader url-loader sass-loader raw-loader</span></span></code></pre></div><p>注意：除了webpack是全局安装之外，其他组件都是安装在app文件夹下面，会自动生成node_modules文件夹。</p><p>3.配置文件webpack.config.js</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">1 module.exports = {</span></span>
<span class="line"><span style="color:#babed8;"> 2   context: __dirname + &#39;/app&#39;,//上下文</span></span>
<span class="line"><span style="color:#babed8;"> 3   entry: &#39;./index.js&#39;,//入口文件</span></span>
<span class="line"><span style="color:#babed8;"> 4   output: {//输出文件</span></span>
<span class="line"><span style="color:#babed8;"> 5     path: __dirname + &#39;/app&#39;,</span></span>
<span class="line"><span style="color:#babed8;"> 6     filename: &#39;./bundle.js&#39;</span></span>
<span class="line"><span style="color:#babed8;"> 7   },</span></span>
<span class="line"><span style="color:#babed8;"> 8   module: {</span></span>
<span class="line"><span style="color:#babed8;"> 9     loaders: [//加载器</span></span>
<span class="line"><span style="color:#babed8;">10       {test: /\\.html$/, loader: &#39;raw-loader&#39;},</span></span>
<span class="line"><span style="color:#babed8;">11       {test: /\\.css$/, loader: &#39;style-loader!css-loader&#39;},</span></span>
<span class="line"><span style="color:#babed8;">12       {test: /\\.scss$/, loader: &#39;style-loader!css-loader!sass-loader&#39;},</span></span>
<span class="line"><span style="color:#babed8;">13       {test: /\\.(png|jpg|ttf)$/, loader: &#39;url-loader?limit=8192&#39;}</span></span>
<span class="line"><span style="color:#babed8;">14     ]</span></span>
<span class="line"><span style="color:#babed8;">15   }</span></span>
<span class="line"><span style="color:#babed8;">16 };</span></span></code></pre></div><p>4.入口文件index.js</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">1 var angular = require(&#39;angular&#39;);//引入angular</span></span>
<span class="line"><span style="color:#babed8;">2 var ngModule = angular.module(&#39;app&#39;,[]);//定义一个angular模块</span></span>
<span class="line"><span style="color:#babed8;">3 require(&#39;./directives/hello-world/hello-world.js&#39;)(ngModule);//引入指令(directive)文件</span></span>
<span class="line"><span style="color:#babed8;">4 require(&#39;./css/style.css&#39;);//引入样式文件</span></span></code></pre></div><p>require用于引入外部模块(可以是对象，可以是函数，可以是css样式，可以是html页面等)</p><p>5.主页面index.html</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">1 &lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color:#babed8;"> 2 &lt;html ng-app=&quot;app&quot;&gt;</span></span>
<span class="line"><span style="color:#babed8;"> 3 &lt;head lang=&quot;en&quot;&gt;</span></span>
<span class="line"><span style="color:#babed8;"> 4   &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span>
<span class="line"><span style="color:#babed8;"> 5   &lt;title&gt;Angular with Webpack&lt;/title&gt;</span></span>
<span class="line"><span style="color:#babed8;"> 6 &lt;/head&gt;</span></span>
<span class="line"><span style="color:#babed8;"> 7 &lt;body&gt;</span></span>
<span class="line"><span style="color:#babed8;"> 8   &lt;h1&gt;Angular + Webpack&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#babed8;"> 9   &lt;hello-world&gt;&lt;/hello-world&gt;</span></span>
<span class="line"><span style="color:#babed8;">10   &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#babed8;">11 &lt;/body&gt;</span></span>
<span class="line"><span style="color:#babed8;">12 &lt;/html&gt;</span></span></code></pre></div><p>可以看到主页面是非常干净清爽的，只引入了一个输出文件bundle.js，然后html标签里加了ng-app=&quot;app&quot;。</p><p>6.指令文件hello-world.js</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">1 module.exports = function(ngModule) {</span></span>
<span class="line"><span style="color:#babed8;"> 2   ngModule.directive(&#39;helloWorld&#39;, helloWorldFn);//定义指令，对应页面中的&lt;hello-world&gt;&lt;/hello-world&gt;</span></span>
<span class="line"><span style="color:#babed8;"> 3   require(&#39;./hello-world.scss&#39;);</span></span>
<span class="line"><span style="color:#babed8;"> 4   function helloWorldFn() {</span></span>
<span class="line"><span style="color:#babed8;"> 5     return {</span></span>
<span class="line"><span style="color:#babed8;"> 6       restrict: &#39;E&#39;,//元素(element)</span></span>
<span class="line"><span style="color:#babed8;"> 7       scope: {},</span></span>
<span class="line"><span style="color:#babed8;"> 8       template: require(&#39;./hello-world.html&#39;),//模板</span></span>
<span class="line"><span style="color:#babed8;"> 9       //templateUrl: &#39;directives/hello-world/hello-world.html&#39;,</span></span>
<span class="line"><span style="color:#babed8;">10       controllerAs: &#39;vm&#39;,// &lt;=&gt; $scope.vm = {greeting: &#39;你好，我是卡哥&#39;}</span></span>
<span class="line"><span style="color:#babed8;">11       controller: function () {</span></span>
<span class="line"><span style="color:#babed8;">12         var vm = this;</span></span>
<span class="line"><span style="color:#babed8;">13         vm.greeting = &#39;你好，我是卡哥，很高兴见到你&#39;;</span></span>
<span class="line"><span style="color:#babed8;">14       }</span></span>
<span class="line"><span style="color:#babed8;">15     }</span></span>
<span class="line"><span style="color:#babed8;">16   }</span></span>
<span class="line"><span style="color:#babed8;">17 }</span></span></code></pre></div><p>module.exports用于将模块(文件)作为一个接口(一般是一个函数)暴露给外部。</p><p>7.其他文件(style.css、hello-world.html、hello-world.scss)</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">1 @font-face{</span></span>
<span class="line"><span style="color:#babed8;"> 2     font-family: &#39;maozedong&#39;;</span></span>
<span class="line"><span style="color:#babed8;"> 3     src: url(../fonts/maozedong.ttf);</span></span>
<span class="line"><span style="color:#babed8;"> 4 }</span></span>
<span class="line"><span style="color:#babed8;"> 5 body{</span></span>
<span class="line"><span style="color:#babed8;"> 6     background: url(../images/longmao.jpg) yellowgreen;</span></span>
<span class="line"><span style="color:#babed8;"> 7     font-size: 24pt;</span></span>
<span class="line"><span style="color:#babed8;"> 8     color: #fff;</span></span>
<span class="line"><span style="color:#babed8;"> 9     font-family: &#39;maozedong&#39;;</span></span>
<span class="line"><span style="color:#babed8;">10 }</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">1 &lt;div class=&quot;hello-world&quot;&gt;</span></span>
<span class="line"><span style="color:#babed8;">2   {{vm.greeting}}</span></span>
<span class="line"><span style="color:#babed8;">3 &lt;/div&gt;</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">1 .hello-world {</span></span>
<span class="line"><span style="color:#babed8;">2   color: red;</span></span>
<span class="line"><span style="color:#babed8;">3   border: 1px solid green;</span></span>
<span class="line"><span style="color:#babed8;">4 }</span></span></code></pre></div><p>8.编译和运行 在命令行工具中输入：webpack，即可编译，这时我们会遇到第一个坑：</p><p><img src="https://user-images.githubusercontent.com/9566362/227753856-85e32497-4daf-4bba-8177-774f881ec0f6.png" alt="image"></p><p>这个错误的关键行在&quot;You may need an appropriate loader to handle the file type&quot;，大概意思就是你的加载器(loader)不正确，可是我们明明安装上了所有的加载器啊，也在配置文件中引用了呀，我在网上找了很久都没找到问题所在，后来还是一位细心的同事帮我解决这个问题的，原来问题出在配置文件中的&quot;module&quot;下的&quot;loader&quot;应该是&quot;loaders&quot;，就因为少了一个&quot;s&quot;，浪费我一上午的时间。</p><p>修改过来之后，编译通过了，我们在浏览器中打开主页面index.html，这时遇到了第二个坑：</p><p><img src="https://user-images.githubusercontent.com/9566362/227753846-e553a501-9d8d-41dd-bc13-b5521bf2ac9e.png" alt="image"></p><p>大概意思是你跨域了，不能加载hello-world.html这个文件，问题出在指令文件hello-world.js中的引用模板地址的代码：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">templateUrl: &#39;directives/hello-world/hello-world.html&#39;</span></span></code></pre></div><p>在网上搜到一个解决办法，就是使用Node.js自带的的http-server，以下是server.js的代码：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">1 var port = 8000,</span></span>
<span class="line"><span style="color:#babed8;">2     express = require(&#39;express&#39;),</span></span>
<span class="line"><span style="color:#babed8;">3     app = express();</span></span>
<span class="line"><span style="color:#babed8;">4 app.use(&#39;/&#39;, express.static(__dirname));</span></span>
<span class="line"><span style="color:#babed8;">5 app.listen(port);</span></span>
<span class="line"><span style="color:#babed8;">6 console.log(&#39;Now serving http://localhost:&#39; + port + &#39;/index.html&#39;);</span></span></code></pre></div><p>使用之前要先安装express：npm install express，然后在命令行工具中输入node server.js开启服务，这时在浏览器中输入：localhost:8000/index.html即可访问主页面。</p><p>另外一个方法是用require的方式引入hello-world.html：</p><p>template: require(&#39;./hello-world.html&#39;)</p><h2 id="_3-补充" tabindex="-1">3 补充 <a class="header-anchor" href="#_3-补充" aria-label="Permalink to &quot;3 补充&quot;">​</a></h2><p>(1)编译的命令&quot;webpack&quot;后面可以加参数，如：</p><p>&quot;webpack -p&quot;表示对打包后的文件进行压缩</p><p>&quot;webpack -w&quot;表示实时进行打包更新</p><p>&quot;webpack -d&quot;表示提供source map，方便调试</p><p>(2)webpack-dev-server可以提供实时监视文件变化的功能，使用之前先安装webpack-dev-server：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npm install webpack-dev-server -g</span></span></code></pre></div><p>然后在命令行中输入：webpack-dev-server --progress --colors，显示以下结果：</p><p><img src="https://user-images.githubusercontent.com/9566362/227753838-19a238d7-68fa-4a9f-bdba-f69313e8a689.png" alt="image"></p><p>这时在浏览器中输入：localhost:8080(localhost:8080/webpack-dev-server)，你对静态资源的任何改动都会直接反映到主页面中。</p><p>---------------------------------- 华丽的分割线 -----------------------------------</p><p>总结：这是一个Webpack+Angular的典型例子，包含了最基本的打包js文件、css文件、scss文件、图片、字体的方法。通过这几天对Webpack的学习，发现有关Webpack的资料确实是非常少的，百度百科和维基百科上甚至都没有这个词条。希望这篇文章可以帮助大家入门。</p><p>---------------------------------- 2016.11.29 更新 -----------------------------------</p><p>有不少朋友表示照着教程来会报错，原因都不太一样，所以附上<a href="https://github.com/kagol/angular-webpack" target="_blank" rel="noreferrer">示例源码</a>，大家看源码就知道哪里出问题了，有不懂的地方欢迎讨论。</p><p>---------------------------------- 2017.5.18 更新 -----------------------------------</p><p>有朋友反映 webpack 的模块加载器不加后缀 &quot;-loader&quot; 会报错，原因是webpack官方已经把自动加&quot;-loader&quot;的机制去掉，为什么移除这一特性官方有做<a href="https://github.com/webpack/webpack/issues/2986" target="_blank" rel="noreferrer">解释</a>，所以更新了下 webpack.config.js 文件：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">module: {</span></span>
<span class="line"><span style="color:#babed8;">    loaders: [//加载器</span></span>
<span class="line"><span style="color:#babed8;">        {test: /\\.html$/, loader: &#39;raw-loader&#39;},</span></span>
<span class="line"><span style="color:#babed8;">        {test: /\\.css$/, loader: &#39;style-loader!css-loader&#39;},</span></span>
<span class="line"><span style="color:#babed8;">        {test: /\\.scss$/, loader: &#39;style-loader!css-loader!sass-loader&#39;},</span></span>
<span class="line"><span style="color:#babed8;">        {test: /\\.(png|jpg|ttf)$/, loader: &#39;url-loader?limit=8192&#39;}</span></span>
<span class="line"><span style="color:#babed8;">    ]</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><p>报错截图：</p><p><img src="https://user-images.githubusercontent.com/9566362/227753824-d4b6beeb-9790-4b96-96b5-36860d311cf1.png" alt="image"></p><p>还有一个常见的问题，就是 node-sass 模块的安装问题，直接 npm install -g node-sass 的方式安装在windows下会失败(貌似是网络问题，要FQ)，需要用淘宝的npm镜像。</p>`,68);function r(i,d,b,u,g,h){const a=e("EditInfo");return n(),l("div",null,[c,p(a,{time:"2016-01-23 15:42",title:"阅读(23620) 评论(33) 推荐(12)"})])}const k=s(o,[["render",r]]);export{m as __pageData,k as default};
