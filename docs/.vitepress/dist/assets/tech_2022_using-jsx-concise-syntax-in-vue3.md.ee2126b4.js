import{_ as a,B as n,o as e,c as l,G as p,Q as o}from"./chunks/framework.1fee3549.js";const m=JSON.parse('{"title":"前端Vuer，请收下这份《Vue3中使用JSX简明语法》","description":"","frontmatter":{},"headers":[],"relativePath":"tech/2022/using-jsx-concise-syntax-in-vue3.md","filePath":"tech/2022/using-jsx-concise-syntax-in-vue3.md"}'),t={name:"tech/2022/using-jsx-concise-syntax-in-vue3.md"},c=o(`<h1 id="前端vuer-请收下这份《vue3中使用jsx简明语法》" tabindex="-1">前端Vuer，请收下这份《Vue3中使用JSX简明语法》 <a class="header-anchor" href="#前端vuer-请收下这份《vue3中使用jsx简明语法》" aria-label="Permalink to &quot;前端Vuer，请收下这份《Vue3中使用JSX简明语法》&quot;">​</a></h1><p><img src="https://user-images.githubusercontent.com/9566362/201376027-8980c033-60a1-48b0-b9ef-59834628edb4.png" alt="image"></p><p><a href="https://github.com/DevCloudFE/vue-devui" target="_blank" rel="noreferrer">Vue DevUI</a> 所有组件都是 Vue3 + JSX 语法写的，我虽然会 Vue3，但是我不会 JSX 怎们办？</p><p>有了这份《Vue3中使用JSX简明语法》宝典就不慌啦！</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3fd8a2d08aea47109be965fce09bf1ef~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>这份宝典汇集了所有你在写 Vue3 项目可能会用到的常用 JSX 语法。</p><h2 id="_1-文本插值" tabindex="-1">1 文本插值 <a class="header-anchor" href="#_1-文本插值" aria-label="Permalink to &quot;1 文本插值&quot;">​</a></h2><p>Vue里面文本插值默认是用双大括号:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&lt;h1&gt;{{ msg }}&lt;/h1&gt;</span></span></code></pre></div><p>在JSX中变成了单大括号：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const name = &#39;Vue DevUI&#39;</span></span>
<span class="line"><span style="color:#babed8;">const element = &lt;h1&gt;Hello, { name }&lt;/h1&gt;</span></span></code></pre></div><p>和Vue模板语法中的文本插值一样，大括号内支持任何有效的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions" target="_blank" rel="noreferrer">JavaScript 表达式</a>，比如：<code>2 + 2</code>，<code>user.firstName</code>，<code>formatName(user)</code>等。</p><h2 id="_2-条件渲染" tabindex="-1">2 条件渲染 <a class="header-anchor" href="#_2-条件渲染" aria-label="Permalink to &quot;2 条件渲染&quot;">​</a></h2><p>jsx本身也是一个条件表达式，不再需要使用<code>v-if</code>指令。</p><h3 id="_2-1-使用-if-else" tabindex="-1">2.1 使用 if/else <a class="header-anchor" href="#_2-1-使用-if-else" aria-label="Permalink to &quot;2.1 使用 if/else&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const element = (name) =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">  if (name) {</span></span>
<span class="line"><span style="color:#babed8;">    return &lt;h1&gt;Hello, { name }&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#babed8;">  } else {</span></span>
<span class="line"><span style="color:#babed8;">    return &lt;h1&gt;Hello, Stranger&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#babed8;">  }</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><p>以上代码等效于：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const element = (name) =&gt; &lt;h1&gt;Hello, { name || &#39;Stranger&#39; }&lt;/h1&gt;</span></span></code></pre></div><h3 id="_2-2-使用三目运算符" tabindex="-1">2.2 使用三目运算符 <a class="header-anchor" href="#_2-2-使用三目运算符" aria-label="Permalink to &quot;2.2 使用三目运算符&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const element = icon ? &lt;span class=&quot;icon&quot;&gt;&lt;/span&gt; : null;</span></span></code></pre></div><p>以上代码等效于：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const element = icon &amp;&amp; &lt;span class=&quot;icon&quot;&gt;&lt;/span&gt;;</span></span></code></pre></div><h2 id="_3-列表渲染" tabindex="-1">3 列表渲染 <a class="header-anchor" href="#_3-列表渲染" aria-label="Permalink to &quot;3 列表渲染&quot;">​</a></h2><p>列表渲染直接使用JS数组的map方法即可，不需要使用<code>v-for</code>指令。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const data = [{</span></span>
<span class="line"><span style="color:#babed8;">  id: 1,</span></span>
<span class="line"><span style="color:#babed8;">  title: &#39;通用&#39;</span></span>
<span class="line"><span style="color:#babed8;">}, {</span></span>
<span class="line"><span style="color:#babed8;">  id: 2,</span></span>
<span class="line"><span style="color:#babed8;">  title: &#39;导航&#39;</span></span>
<span class="line"><span style="color:#babed8;">}]</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">const element = data.map(item =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">  return &lt;div&gt;{ item.title }&lt;/div&gt;</span></span>
<span class="line"><span style="color:#babed8;">})</span></span></code></pre></div><h2 id="_4-标签属性绑定" tabindex="-1">4 标签属性绑定 <a class="header-anchor" href="#_4-标签属性绑定" aria-label="Permalink to &quot;4 标签属性绑定&quot;">​</a></h2><p>属性绑定也是使用大括号包裹，不需要使用<code>v-bind</code>指令。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const href = &#39;https://devui.design/&#39;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">const element = &lt;a href={href}&gt;DevUI Design&lt;/a&gt;</span></span></code></pre></div><h2 id="_5-class-类名绑定" tabindex="-1">5 class 类名绑定 <a class="header-anchor" href="#_5-class-类名绑定" aria-label="Permalink to &quot;5 class 类名绑定&quot;">​</a></h2><p>直接使用JS模板字符串即可。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const element = &lt;div className={\`devui-accordion-item-title \${ disabled ? &#39;disabled&#39; : &#39;&#39; }\`}&gt;&lt;/div&gt;</span></span></code></pre></div><p>也可以使用数组：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const element = &lt;div class={</span></span>
<span class="line"><span style="color:#babed8;">    [</span></span>
<span class="line"><span style="color:#babed8;">      &#39;devui-accordion-item-title&#39;,</span></span>
<span class="line"><span style="color:#babed8;">      disabled &amp;&amp; &#39;disabled&#39;</span></span>
<span class="line"><span style="color:#babed8;">    ]</span></span>
<span class="line"><span style="color:#babed8;">  }</span></span>
<span class="line"><span style="color:#babed8;">&gt;Item&lt;/div&gt;</span></span></code></pre></div><h2 id="_6-style-样式绑定" tabindex="-1">6 style 样式绑定 <a class="header-anchor" href="#_6-style-样式绑定" aria-label="Permalink to &quot;6 style 样式绑定&quot;">​</a></h2><p>样式绑定需要使用双大括号。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const width = &#39;100px&#39;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">const element = &lt;button style={{ width, fontSize: &#39;16px&#39; }}&gt;&lt;/button&gt;</span></span></code></pre></div><h2 id="_7-事件绑定" tabindex="-1">7 事件绑定 <a class="header-anchor" href="#_7-事件绑定" aria-label="Permalink to &quot;7 事件绑定&quot;">​</a></h2><p>绑定事件也是用大括号，注意事件名前面要加上<code>on</code>前缀，比如click事件要写成<code>onClick</code>，mouseenter事件要写成<code>onMouseenter</code>。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const confirm = () =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">  // 确认提交</span></span>
<span class="line"><span style="color:#babed8;">}</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">&lt;button onClick={confirm}&gt;确定&lt;/button&gt;</span></span></code></pre></div><p>如果要带参数，需要使用箭头函数进行包裹：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const confirm = (name) =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">  // 确认提交</span></span>
<span class="line"><span style="color:#babed8;">}</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">&lt;button onClick={() =&gt; confirm(&#39;devui&#39;)}&gt;确定&lt;/button&gt;</span></span></code></pre></div><h3 id="_7-1-事件修饰符" tabindex="-1">7.1 事件修饰符 <a class="header-anchor" href="#_7-1-事件修饰符" aria-label="Permalink to &quot;7.1 事件修饰符&quot;">​</a></h3><p>jsx中给事件增加修饰符需要借助<code>withModifiers</code>方法。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import { withModifiers, defineComponent, ref } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">const App = defineComponent({</span></span>
<span class="line"><span style="color:#babed8;">  setup() {</span></span>
<span class="line"><span style="color:#babed8;">    const count = ref(0);</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    const inc = () =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">      count.value++;</span></span>
<span class="line"><span style="color:#babed8;">    };</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    return () =&gt; (</span></span>
<span class="line"><span style="color:#babed8;">      &lt;div onClick={ withModifiers(inc, [&#39;self&#39;]) }&gt;{ count.value }&lt;/div&gt;</span></span>
<span class="line"><span style="color:#babed8;">    );</span></span>
<span class="line"><span style="color:#babed8;">  },</span></span>
<span class="line"><span style="color:#babed8;">})</span></span></code></pre></div><blockquote><p>注意：Vue模板中ref变量是可以直接解构的，但是在jsx中不行，需要记得添加<code>.value</code>，比如上面的<code>{ count.value }</code>。</p></blockquote><h2 id="_8-v-model-双向绑定" tabindex="-1">8 v-model 双向绑定 <a class="header-anchor" href="#_8-v-model-双向绑定" aria-label="Permalink to &quot;8 v-model 双向绑定&quot;">​</a></h2><ol><li>绑定<code>modelValue</code></li></ol><p>这种情况比较简单。</p><p><code>JSX</code>写法：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">d-flexible-overlay</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;"> menuShow.value </span><span style="color:#89DDFF;">}&gt;&lt;/</span><span style="color:#F07178;">d-flexible-overlay</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><code>SFC</code>写法：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">d-flexible-overlay</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">menuShow</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">d-flexible-overlay</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ol start="2"><li>绑定自定义名称</li></ol><p>比如绑定<code>visible</code>，JSX中不能直接用<code>v-model:visible</code>的语法，需要传入一个数组<code>[menuShow.value, &#39;visible&#39;]</code>，数组的第二个参数就是要绑定的自定义名称。</p><p><code>JSX</code>写法：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">d-flexible-overlay</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">={</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">menuShow</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">visible</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]}&gt;&lt;/d-flexible-overlay&gt;</span></span></code></pre></div><p><code>SFC</code>写法：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">d-flexible-overlay</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">visible</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">menuShow</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">d-flexible-overlay</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="_9-slot-插槽" tabindex="-1">9 slot 插槽 <a class="header-anchor" href="#_9-slot-插槽" aria-label="Permalink to &quot;9 slot 插槽&quot;">​</a></h2><p>jsx中没有<code>&lt;slot&gt;</code>标签，定义插槽需要使用双大括号。</p><p>如果是具名插槽，则将<code>default</code>改成具名插槽的名称，比如<code>mySlot</code>，则使用<code>ctx.slots.mySlot?.()</code>。</p><p>插槽从setup的第二个参数<code>ctx</code>中获取，不需要加<code>$</code>前缀。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import { defineComponent } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">export default defineComponent({</span></span>
<span class="line"><span style="color:#babed8;">  setup(props, { slots }) { // 逻辑</span></span>
<span class="line"><span style="color:#babed8;">    return () =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">      return &lt;button&gt;{ slots.default?.() }&lt;/button&gt;</span></span>
<span class="line"><span style="color:#babed8;">    }</span></span>
<span class="line"><span style="color:#babed8;">  },</span></span>
<span class="line"><span style="color:#babed8;">})</span></span></code></pre></div><p>还可以使用<code>renderSlot</code>方法：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import { renderSlot } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">&lt;button&gt;</span></span>
<span class="line"><span style="color:#babed8;">  { renderSlot(slots, &#39;default&#39;) }</span></span>
<span class="line"><span style="color:#babed8;">&lt;/button&gt;</span></span></code></pre></div><h3 id="_9-1-scoped-slots-作用域插槽" tabindex="-1">9.1 Scoped Slots 作用域插槽 <a class="header-anchor" href="#_9-1-scoped-slots-作用域插槽" aria-label="Permalink to &quot;9.1 Scoped Slots 作用域插槽&quot;">​</a></h3><p>使用作用域插槽可以实现插槽传参，以下是具体的示例。</p><p><code>JSX</code>和<code>SFC</code>中插槽使用的写法对比。</p><p><code>JSX</code>写法：</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">d-tree</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">data</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">{{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#82AAFF;">mySlot</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">item</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> (item</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">open </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IconOpen</span><span style="color:#89DDFF;"> /&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IconClose</span><span style="color:#89DDFF;"> /&gt;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">d-tree</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>还可以通过<code>v-slots</code>的方式使用：</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">d-tree</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">data</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">v-slots</span><span style="color:#89DDFF;">={{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">mySlot</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">item</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> (item</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">open </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IconOpen</span><span style="color:#89DDFF;"> /&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IconClose</span><span style="color:#89DDFF;"> /&gt;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}}&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">d-tree</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><code>SFC</code>写法：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">d-tree</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">data</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &lt;template #mySlot=&quot;item&quot;&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    &lt;IconOpen v-if=&quot;item.open&quot; /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    &lt;IconClose v-else /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  &lt;/template&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">d-tree</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>其中的<code>item</code>是插槽的参数，通过</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">ctx.slots.mySlot(item)</span></span></code></pre></div><p>的方式给插槽传入参数。</p><p>或者使用<code>renderSlot</code>方法，第三个参数就是要传给插槽的参数：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import { renderSlot, useSlots } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">&lt;button&gt;</span></span>
<span class="line"><span style="color:#babed8;">  { renderSlot(useSlots(), &#39;mySlot&#39;, item) }</span></span>
<span class="line"><span style="color:#babed8;">&lt;/button&gt;</span></span></code></pre></div><hr><p>补充：</p><ol><li>属性绑定</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const properties = {a: 1, b: 2}</span></span></code></pre></div><p>SFC中<code>&lt;div v-bind=&quot;properties&quot;&gt;&lt;/div&gt;</code>批量绑定标签属性。</p><p>在JSX中的替换方案是<code>&lt;div {...properties}&gt;&lt;/div&gt;</code>。</p><ol start="2"><li>class绑定</li></ol><p>使用<code>CSS Modules</code>，引入局部样式，相当于SFC中的<code>scoped</code>。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import styles from &#39;./index.module.scss&#39;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">&lt;div class={styles.wrap}&gt;&lt;/div&gt;</span></span></code></pre></div><p>感谢 <a href="https://juejin.cn/user/1011206428033261" target="_blank" rel="noreferrer">@momo11</a> 同学提供的两个实用的 jsx 用法。</p><hr><h2 id="_10-小结" tabindex="-1">10 小结 <a class="header-anchor" href="#_10-小结" aria-label="Permalink to &quot;10 小结&quot;">​</a></h2><p>本文是一个小册子，主要介绍在 Vue3 中使用 JSX 的语法和实践，包含了文本插值、属性绑定、事件绑定、双向绑定、条件渲染、列表渲染、插槽等几乎所有的 Vue3 语法，如果你也在 Vue3 中写 JSX，这份指南或许能提供一点参考。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d864b8748a0a4286b4b55c8c56fa8393~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>`,93);function r(i,d,b,y,u,g){const s=n("EditInfo");return e(),l("div",null,[c,p(s,{time:"2022年06月28日 07:24",title:"阅读 22986 ·  点赞 281 ·  评论 85 ·  收藏 487"})])}const D=a(t,[["render",r]]);export{m as __pageData,D as default};
