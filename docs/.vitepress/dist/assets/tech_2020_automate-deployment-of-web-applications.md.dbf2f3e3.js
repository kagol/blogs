import{_ as e,B as s,o as n,c as l,G as p,Q as t}from"./chunks/framework.1fee3549.js";const f=JSON.parse('{"title":"大厂是如何用DevCloud流水线实现自动化部署Web应用的？","description":"","frontmatter":{},"headers":[],"relativePath":"tech/2020/automate-deployment-of-web-applications.md","filePath":"tech/2020/automate-deployment-of-web-applications.md"}'),i={name:"tech/2020/automate-deployment-of-web-applications.md"},o=t(`<h1 id="大厂是如何用devcloud流水线实现自动化部署web应用的" tabindex="-1">大厂是如何用DevCloud流水线实现自动化部署Web应用的？ <a class="header-anchor" href="#大厂是如何用devcloud流水线实现自动化部署web应用的" aria-label="Permalink to &quot;大厂是如何用DevCloud流水线实现自动化部署Web应用的？&quot;">​</a></h1><p><img src="https://user-images.githubusercontent.com/9566362/201151592-deb82a8c-e74b-448c-93a3-431e1c86ba08.png" alt="image"></p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>本文以<a href="https://github.com/devcloudfe/ng-devui" target="_blank" rel="noreferrer">DevUI组件库</a>网站为例，介绍如何用DevCloud流水线自动化部署一个前端应用。</p><p>本文可以认为是<a href="https://juejin.im/post/6844904158391173128" target="_blank" rel="noreferrer">《手把手教你搭建自己的Angular组件库》</a>的续集，当我们搭建好组件库之后，如何将其网站部署到服务器。</p><h2 id="_1-搭建服务器环境" tabindex="-1">1 搭建服务器环境 <a class="header-anchor" href="#_1-搭建服务器环境" aria-label="Permalink to &quot;1 搭建服务器环境&quot;">​</a></h2><p>本机开发完代码，并push到远程代码仓库，还需要部署到服务器上，用户才能访问到。</p><p>因此为了部署你的应用，第一步需要购买一台服务器，为了节省成本，一般都会购买按需使用的云服务器，如何申请云服务器就不介绍了，下面介绍如何在Linux服务器搭建Nginx服务。</p><h3 id="_1-1-安装nginx" tabindex="-1">1.1 安装Nginx <a class="header-anchor" href="#_1-1-安装nginx" aria-label="Permalink to &quot;1.1 安装Nginx&quot;">​</a></h3><p>Web应用通常都会使用Nginx作为反向代理。</p><p>为了让用户可以访问我们的应用，需要在服务器安装Nginx应用。</p><p>我们使用源码编译方式安装最新版本的Nginx，主要分成以下步骤：</p><ul><li>下载</li><li>解压</li><li>配置</li><li>编译</li><li>安装</li></ul><h4 id="_1-1-1-下载nginx源码" tabindex="-1">1.1.1 下载Nginx源码 <a class="header-anchor" href="#_1-1-1-下载nginx源码" aria-label="Permalink to &quot;1.1.1 下载Nginx源码&quot;">​</a></h4><p>先在<a href="http://nginx.org/en/download.html" target="_blank" rel="noreferrer">Nginx官网下载页</a>找到Linux版本的Nginx源码包地址，然后使用wget命令下载Nginx源码安装包。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">wget http://nginx.org/download/nginx-1.18.0.tar.gz</span></span></code></pre></div><h4 id="_1-1-2-解压" tabindex="-1">1.1.2 解压 <a class="header-anchor" href="#_1-1-2-解压" aria-label="Permalink to &quot;1.1.2 解压&quot;">​</a></h4><p>使用tar命令进行解压。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">tar -zxvf nginx-1.18.0.tar.gz</span></span></code></pre></div><h4 id="_1-1-3-配置" tabindex="-1">1.1.3 配置 <a class="header-anchor" href="#_1-1-3-配置" aria-label="Permalink to &quot;1.1.3 配置&quot;">​</a></h4><p>先进入nginx源码的根目录，然后执行configure配置脚本，这里只配置了nginx的安装目录。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">cd nginx-1.18.0</span></span>
<span class="line"><span style="color:#babed8;">./configure --prefix=/usr/local/nginx</span></span></code></pre></div><p>执行完发现报错了，原来是缺少依赖库。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">[root@ecs-kagol nginx-1.18.0]## ./configure --prefix=/usr/local/nginx</span></span>
<span class="line"><span style="color:#babed8;">checking for OS</span></span>
<span class="line"><span style="color:#babed8;"> + Linux 3.10.0-862.14.1.5.h428.eulerosv2r7.x86_64 x86_64</span></span>
<span class="line"><span style="color:#babed8;">checking for C compiler ... found</span></span>
<span class="line"><span style="color:#babed8;"> + using GNU C compiler</span></span>
<span class="line"><span style="color:#babed8;"> + gcc version: 4.8.5 20150623 (EulerOS 4.8.5-28) (GCC)</span></span>
<span class="line"><span style="color:#babed8;">checking for gcc -pipe switch ... found</span></span>
<span class="line"><span style="color:#babed8;">...</span></span>
<span class="line"><span style="color:#babed8;">checking for PCRE library in /usr/local/ ... not found</span></span>
<span class="line"><span style="color:#babed8;">checking for PCRE library in /usr/include/pcre/ ... not found</span></span>
<span class="line"><span style="color:#babed8;">checking for PCRE library in /usr/pkg/ ... not found</span></span>
<span class="line"><span style="color:#babed8;">checking for PCRE library in /opt/local/ ... not found</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">./configure: error: the HTTP rewrite module requires the PCRE library.</span></span>
<span class="line"><span style="color:#babed8;">You can either disable the module by using --without-http_rewrite_module</span></span>
<span class="line"><span style="color:#babed8;">option, or install the PCRE library into the system, or build the PCRE library</span></span>
<span class="line"><span style="color:#babed8;">statically from the source with nginx by using --with-pcre=&lt;path&gt; option.</span></span></code></pre></div><p>主要需要安装<code>pcre</code>/<code>zlib</code>/<code>openssl</code>三个依赖库，我们使用yum包管理工具（类似Node的npm包管理工具）来安装。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">yum -y install pcre-devel zlib-devel openssl-devel</span></span></code></pre></div><p>安装完依赖库之后再次执行configure脚本，Nginx配置成功，配置结果如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">...</span></span>
<span class="line"><span style="color:#babed8;">checking for getaddrinfo() ... found</span></span>
<span class="line"><span style="color:#babed8;">checking for PCRE library ... found</span></span>
<span class="line"><span style="color:#babed8;">checking for PCRE JIT support ... found</span></span>
<span class="line"><span style="color:#babed8;">checking for zlib library ... found</span></span>
<span class="line"><span style="color:#babed8;">creating objs/Makefile</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">Configuration summary</span></span>
<span class="line"><span style="color:#babed8;">  + using system PCRE library</span></span>
<span class="line"><span style="color:#babed8;">  + OpenSSL library is not used</span></span>
<span class="line"><span style="color:#babed8;">  + using system zlib library</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">  nginx path prefix: &quot;/usr/local/nginx&quot;</span></span>
<span class="line"><span style="color:#babed8;">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</span></span>
<span class="line"><span style="color:#babed8;">  nginx modules path: &quot;/usr/local/nginx/modules&quot;</span></span>
<span class="line"><span style="color:#babed8;">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</span></span>
<span class="line"><span style="color:#babed8;">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</span></span>
<span class="line"><span style="color:#babed8;">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</span></span>
<span class="line"><span style="color:#babed8;">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</span></span>
<span class="line"><span style="color:#babed8;">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</span></span>
<span class="line"><span style="color:#babed8;">  nginx http client request body temporary files: &quot;client_body_temp&quot;</span></span>
<span class="line"><span style="color:#babed8;">  nginx http proxy temporary files: &quot;proxy_temp&quot;</span></span>
<span class="line"><span style="color:#babed8;">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</span></span>
<span class="line"><span style="color:#babed8;">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span></span>
<span class="line"><span style="color:#babed8;">  nginx http scgi temporary files: &quot;scgi_temp&quot;</span></span></code></pre></div><p>我们注意到执行完configure配置脚本之后，生成了一个Makefile文件，该文件就是用来编译Nginx源码的。</p><h4 id="_1-1-4-编译" tabindex="-1">1.1.4 编译 <a class="header-anchor" href="#_1-1-4-编译" aria-label="Permalink to &quot;1.1.4 编译&quot;">​</a></h4><p>相比配置，编译的步骤就简单多了，只需要执行make命令即可。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">make</span></span></code></pre></div><h4 id="_1-1-5-安装" tabindex="-1">1.1.5 安装 <a class="header-anchor" href="#_1-1-5-安装" aria-label="Permalink to &quot;1.1.5 安装&quot;">​</a></h4><p>编译完之后就是安装了，这一步才会真正在/usr/local/nginx目录下生成相应的文件。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">make install</span></span></code></pre></div><p>安装完之后，在/usr/local/nginx目录下已经生成了运行Nginx应用需要的所有文件。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abdbbe97b390424682b6bab0771bbce1~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h4 id="_1-1-6-运行启动nginx" tabindex="-1">1.1.6 运行启动Nginx <a class="header-anchor" href="#_1-1-6-运行启动nginx" aria-label="Permalink to &quot;1.1.6 运行启动Nginx&quot;">​</a></h4><p>执行nginx目录下的sbin/nginx就可以直接启动Nginx啦。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">/usr/local/nginx/sbin/nginx</span></span></code></pre></div><h4 id="_1-1-7-验证是否启动成功" tabindex="-1">1.1.7 验证是否启动成功 <a class="header-anchor" href="#_1-1-7-验证是否启动成功" aria-label="Permalink to &quot;1.1.7 验证是否启动成功&quot;">​</a></h4><p>在本机浏览器中输入服务器的公网IP地址，即可访问Nginx应用。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/650d33ebc16e4fb8981949f1fbacd765~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>这里显示了Nginx的欢迎页面，等我们部署好自己的Web应用之后，这个网页将显示我们自己的网站首页。</p><h2 id="_2-手工部署流程" tabindex="-1">2 手工部署流程 <a class="header-anchor" href="#_2-手工部署流程" aria-label="Permalink to &quot;2 手工部署流程&quot;">​</a></h2><p>我们在本机开发完DevUI网站的代码之后，执行npn run build，这时将在dist目录得到DevUI网站的所有静态资源文件，可以先在本地用<a href="https://github.com/JacksonTian/anywhere" target="_blank" rel="noreferrer">anywhere</a>看下效果。</p><p>为了将其部署到服务器，并通过Nginx服务器访问，我们需要将这些文件上传到服务器的nginx目录，一个一个文件传肯定不现实，需要将其压缩打包，然后上传到服务器，最后解压到nginx的html目录就算部署完成。</p><p>Step 1: 压缩打包 tar</p><p>Step 2: 解压部署 deploy</p><h3 id="_2-1-压缩打包" tabindex="-1">2.1 压缩打包 <a class="header-anchor" href="#_2-1-压缩打包" aria-label="Permalink to &quot;2.1 压缩打包&quot;">​</a></h3><p>npm run build构建出来的静态资源都存放在dist目录下，只需要执行以下命令即可生成tar压缩包：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">tar czvf devui.tar.gz ./dist</span></span></code></pre></div><h3 id="_2-2-解压部署" tabindex="-1">2.2 解压部署 <a class="header-anchor" href="#_2-2-解压部署" aria-label="Permalink to &quot;2.2 解压部署&quot;">​</a></h3><p>登录服务器，使用rz命令将上一步生成的tar包上传到Linux服务器，然后使用tar命令解压到nginx的html目录即可完成部署。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">tar zxvf devui.tar.gz</span></span></code></pre></div><p>如果每次开发完都需要手动执行以上步骤，将会非常麻烦，并且很容易出错。</p><p>为什么不将其自动化呢？</p><h2 id="_3-使用devcloud流水线实现自动部署" tabindex="-1">3 使用DevCloud流水线实现自动部署 <a class="header-anchor" href="#_3-使用devcloud流水线实现自动部署" aria-label="Permalink to &quot;3 使用DevCloud流水线实现自动部署&quot;">​</a></h2><p><a href="https://www.huaweicloud.com/devcloud/" target="_blank" rel="noreferrer">DevCloud</a>是集华为研发实践、前沿研发理念、先进研发工具为一体的软件开发平台，为了实现Web应用的自动化部署，我们主要需要使用DevCloud的<code>流水线</code>/<code>编译构建</code>/<code>发布</code>/<code>部署</code>4个服务。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68df4639a64c44e493c5b4ce484fe708~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>主要分成以下4个步骤：</p><ol><li>创建DevCloud项目</li><li>创建流水线</li><li>创建构建任务</li><li>创建部署任务</li></ol><h3 id="_3-1-创建devcloud项目" tabindex="-1">3.1 创建DevCloud项目 <a class="header-anchor" href="#_3-1-创建devcloud项目" aria-label="Permalink to &quot;3.1 创建DevCloud项目&quot;">​</a></h3><p>由于DevCloud所有服务都是通过项目承载的，因此需要先创建下项目，这里创建一个看板项目。</p><p>先进入<a href="https://devcloud.huaweicloud.com" target="_blank" rel="noreferrer">DevCloud首页</a>，按以下步骤即可创建一个看板项目：</p><ol><li>点击右上角的创建项目</li><li>选择看板项目</li><li>输入项目名称</li><li>确定</li></ol><p>项目创建成功之后直接进入该项目首页，点击头部菜单<code>构建&amp;发布</code>下的<code>流水线</code>按钮即可进行流水线首页。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/807655c573c84e2c9493099c6d52e648~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h3 id="_3-2-创建流水线" tabindex="-1">3.2 创建流水线 <a class="header-anchor" href="#_3-2-创建流水线" aria-label="Permalink to &quot;3.2 创建流水线&quot;">​</a></h3><p>在流水线首页的右上角有一个创建流水线的按钮，点击即可进入流水线的创建流程。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a0b4990f79f45f1a5a7dbd7c5c2f476~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>创建一条流水线主要分成以下步骤：</p><ul><li>输入流水线名称</li><li>选择模板，这里我们选择空模板</li><li>选择代码源，直接只用Github代码仓库即可</li><li>自定义工作流</li></ul><h4 id="选择代码源" tabindex="-1">选择代码源 <a class="header-anchor" href="#选择代码源" aria-label="Permalink to &quot;选择代码源&quot;">​</a></h4><p>为了选择Github代码仓库的源，我们需要新增一个服务扩展点，获得Github的授权，这样DevCloud流水线这边才可以拉取Github的代码，进行构建、部署等步骤。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d23fbaa054a462783d6e767cd54b6fd~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>新增扩展点的步骤也很简单：</p><ul><li>输入扩展点名称</li><li>进行OAuth授权</li></ul><p>有了扩展点，就可以选择你的Github仓库作为代码源啦。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab202d07fe1e42b3b21c710997890e1e~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>选完代码源就可以创建你的流水线啦。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/deedf6682dd7479ab7e74e1ced839254~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>可以新创建的流水线包含3个阶段，第一个阶段关联了一个Github的代码仓，第二个阶段是一个空的构建阶段，里面什么任务也没有，第三个阶段是一个不可编辑的发布仓库阶段。</p><p>这个流水线目前什么都做不了，我们需要往里面添加任务才能完成网站的自动化部署。</p><h3 id="_3-3-创建构建任务" tabindex="-1">3.3 创建构建任务 <a class="header-anchor" href="#_3-3-创建构建任务" aria-label="Permalink to &quot;3.3 创建构建任务&quot;">​</a></h3><p>回顾下之前的手工部署步骤：</p><ol><li>构建源代码</li><li>压缩源代码</li><li>上传软件包到服务器</li><li>解压软件包到Nginx目录</li></ol><p>因此我们首先需要在流水线中添加一个构建任务：</p><ol><li>在构建阶段添加一个构建类型的任务</li><li>创建一个构建任务</li><li>在流水线选择上一步创建好的流水线</li></ol><h4 id="_3-3-1-在构建阶段添加一个构建类型的任务" tabindex="-1">3.3.1 在构建阶段添加一个构建类型的任务 <a class="header-anchor" href="#_3-3-1-在构建阶段添加一个构建类型的任务" aria-label="Permalink to &quot;3.3.1 在构建阶段添加一个构建类型的任务&quot;">​</a></h4><p>在构建阶段添加一个任务，然后在侧滑中选择构建类型，这时该类型下是没有构建任务的，因此没法选择，需要先创建构建任务。</p><h4 id="_3-3-2-创建一个构建任务" tabindex="-1">3.3.2 创建一个构建任务 <a class="header-anchor" href="#_3-3-2-创建一个构建任务" aria-label="Permalink to &quot;3.3.2 创建一个构建任务&quot;">​</a></h4><p>在选择需要调度的任务中点击创建按钮，进入新建构建任务的页面，按照指引创建一个构建任务：</p><ol><li>输入构建任务名称</li><li>选择我们之前创建的Entpoint实例，以及该示例下的Github仓库</li><li>不使用模板，直接创建</li><li>添加Npm构建和上传软件包道发布库这两个构建步骤（关键）</li><li>配置构建参数</li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7e4902ffd674830a9df2e290eed337d~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h5 id="npm构建" tabindex="-1">Npm构建 <a class="header-anchor" href="#npm构建" aria-label="Permalink to &quot;Npm构建&quot;">​</a></h5><p>该步骤直接使用默认的构建脚本命令，只需要增加打tar包的命令即可：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">...</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">npm install ## 安装依赖库</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">npm run build ## 普通的NG CLI生产包构建命令</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">npm run tar ## 新增</span></span></code></pre></div><p>tar命令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&quot;tar&quot;: &quot;node scripts/tar.js&quot;,</span></span></code></pre></div><p>tar.js</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const fs = require(&#39;fs&#39;);</span></span>
<span class="line"><span style="color:#babed8;">const tar = require(&#39;tar&#39;);</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">fs.stat(&#39;./result&#39;, (error, stats) =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">  if (error) {</span></span>
<span class="line"><span style="color:#babed8;">    fs.mkdirSync(&#39;./result&#39;); // 不存在result目录则创建一个空的</span></span>
<span class="line"><span style="color:#babed8;">  }</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">  tar.c({ gzip: true }, [&#39;dist&#39;]) // 将dist目录下的文件全部打包</span></span>
<span class="line"><span style="color:#babed8;">  .pipe(fs.createWriteStream(&#39;./result/devui.tar.gz&#39;)); // 将生成的tar包（devui.tar.gz）放到result目录下</span></span>
<span class="line"><span style="color:#babed8;">});</span></span></code></pre></div><h5 id="上传软件包到发布库" tabindex="-1">上传软件包到发布库 <a class="header-anchor" href="#上传软件包到发布库" aria-label="Permalink to &quot;上传软件包到发布库&quot;">​</a></h5><p>上一个Npm构建步骤已经将压缩包创建好了，这个任务的目的是将这个tar包上传到发布库，也就是之前流水线中的第3个阶段，方便部署时下载tar包到目标服务器。</p><p>该步骤主要需要填写构建包路径：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">./result/devui.tar.gz</span></span></code></pre></div><p>发布版本号和包名不要写死，从部署参数里拿，格式如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">\${releaseVersion}</span></span></code></pre></div><p>其中<code>releaseVersion</code>就是下一步需要配置的构建参数。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8dabed31d7bc43a2a44efa8920f135ee~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h5 id="配置构建参数" tabindex="-1">配置构建参数 <a class="header-anchor" href="#配置构建参数" aria-label="Permalink to &quot;配置构建参数&quot;">​</a></h5><p>codeBranch是默认的参数，我们需要增加releaseVersion和serviceName两个构建参数，一个用于每次构建时的版本号，另一个就是服务名。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d796299d81b45888a879a4064c06896~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h4 id="_3-3-3-在流水线选择上一步创建好的流水线" tabindex="-1">3.3.3 在流水线选择上一步创建好的流水线 <a class="header-anchor" href="#_3-3-3-在流水线选择上一步创建好的流水线" aria-label="Permalink to &quot;3.3.3 在流水线选择上一步创建好的流水线&quot;">​</a></h4><p>回到流水线，就可以选择上一步创建好的流水线，保存即可。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6022494d4f404448be102b4c1ce9e8d7~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>至此构建的步骤已经搞定了，我们可以跑一下试试。</p><p>跑完流水线我们就能在发布仓库看到我们的tar构建包：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ac83c733bcf467b973ee8f886114816~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>有了构建包我们就可以拿它去服务器部署啦，当然我们肯定不会选择手工的方式部署，而是在流水线中创建一个部署任务，让所有过程自动化进行。</p><h3 id="_3-4-创建部署任务" tabindex="-1">3.4 创建部署任务 <a class="header-anchor" href="#_3-4-创建部署任务" aria-label="Permalink to &quot;3.4 创建部署任务&quot;">​</a></h3><p>在流水线中添加部署任务和添加构建任务差不多，只需要以下3步即可：</p><ol><li>添加一个新的阶段</li><li>在该阶段中添加一个部署类型的任务</li><li>创建一个部署任务（关键）</li><li>在步骤2中选择步骤3中创建的部署任务</li></ol><h4 id="创建一个部署任务" tabindex="-1">创建一个部署任务 <a class="header-anchor" href="#创建一个部署任务" aria-label="Permalink to &quot;创建一个部署任务&quot;">​</a></h4><p>和创建构建任务类似：</p><ol><li>输入部署任务名称</li><li>选择空白模板，直接创建</li><li>添加选择部署来源和执行shell命令这两个构建步骤（关键）</li><li>配置部署参数</li></ol><h5 id="选择部署来源" tabindex="-1">选择部署来源 <a class="header-anchor" href="#选择部署来源" aria-label="Permalink to &quot;选择部署来源&quot;">​</a></h5><p>关键是需要选择<code>主机组</code>，填写<code>软件包</code>和<code>部署目录</code>。</p><p>软件包就是之前发布仓库的软件包，直接从<code>/devui/\${releaseVersion}</code>取即可，其中<code>\${releaseVersion}</code>是部署参数，和之前的构建参数类似。</p><p>部署目录是要将tar压缩包上传到目标机器中的目录，我们传到<code>/devui</code>目录中。</p><p>主机组需要新建，选择主机组旁边的<code>新建</code>按钮，进入创建主机组页面，只需要以下步骤即可创建一个主机组：</p><ol><li>填写主机组名称</li><li>添加主机（之前申请的ECS弹性云主机）</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b0656480be848d7a2a01eda028b9b5d~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>添加主机需要填写的信息：</p><ol><li>主机名</li><li>主机IP地址</li><li>用户名（root）</li><li>密码</li><li>端口号（22）</li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b52b9a32e9dd40c2a93198b54f14fb93~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h5 id="执行shell命令" tabindex="-1">执行shell命令 <a class="header-anchor" href="#执行shell命令" aria-label="Permalink to &quot;执行shell命令&quot;">​</a></h5><p>执行shell命令是当你已经把tar软件包上传到目标服务器之后，希望执行的shell命令，我们当然是希望将tar包解压出来喽。</p><p>执行以下shell即可：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">rm -rf /usr/local/nginx/html/* ## 删除之前部署过的静态资源</span></span>
<span class="line"><span style="color:#babed8;">tar zxvf /devui/\${serviceName}.tar.gz -C /usr/local/nginx/html ## 解压tar包到nginx的html目录</span></span>
<span class="line"><span style="color:#babed8;">mv /usr/local/nginx/html/dist/* /usr/local/nginx/html/</span></span></code></pre></div><h5 id="配置部署参数" tabindex="-1">配置部署参数 <a class="header-anchor" href="#配置部署参数" aria-label="Permalink to &quot;配置部署参数&quot;">​</a></h5><p>这里的部署参数和构建参数的配置方式是一样的，不再赘述。</p><p>添加好部署任务我们就可以跑下流水线，看下效果。</p><p>流水线跑完之后，四个阶段都会显示绿色：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a33097307dbc468b8eccc5a1f5f9937b~tplv-k3u1fbpfcp-watermark.image" alt=""></p><p>部署完之后访问咱们的主机IP地址即可看到网站效果，和<a href="https://devui.design/" target="_blank" rel="noreferrer">DevUI官网</a>是一样的。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c39367672cca41109561b150963bee87~tplv-k3u1fbpfcp-watermark.image" alt=""></p><h3 id="_3-5-定时任务" tabindex="-1">3.5 定时任务 <a class="header-anchor" href="#_3-5-定时任务" aria-label="Permalink to &quot;3.5 定时任务&quot;">​</a></h3><p>搭建完流水线，我们可以配置一个定时任务，每天或每周自动用指定分支跑流水线，完全不用人工干预。</p><p>为了保障版本质量，我们也可以在配置灰度部署策略，添加拨测任务，保障每一次部署现网都不出问题。</p><p>限于篇幅就不一一介绍了，感兴趣的小伙伴可以关注<a href="https://www.huaweicloud.com/devcloud/" target="_blank" rel="noreferrer">DevCloud官网</a>，里面详细地介绍了从需求规划到研发、测试、运维整套DevOps流程的玩法。</p><h2 id="_4-小结" tabindex="-1">4 小结 <a class="header-anchor" href="#_4-小结" aria-label="Permalink to &quot;4 小结&quot;">​</a></h2><p>本文详细地介绍如何将一个网站的Github仓库源码自动化部署到服务器。</p><p>先介绍申请服务器和搭建服务器环境，重点介绍在Linux服务器搭建Nginx服务的步骤；</p><p>然后简单介绍了手动部署流程；</p><p>最后详细介绍了如何利用DevCloud流水线工具，实现自动化部署。</p><h2 id="加入我们" tabindex="-1">加入我们 <a class="header-anchor" href="#加入我们" aria-label="Permalink to &quot;加入我们&quot;">​</a></h2><p>我们是DevUI团队，欢迎来这里和我们一起打造优雅高效的人机设计/研发体系。招聘邮箱：muyang2@huawei.com。</p><p>文/DevUI Kagol</p><p>往期文章推荐</p><p><a href="https://juejin.im/post/6885134113964523528" target="_blank" rel="noreferrer">《现在开始为你的Angular应用编写测试 》</a></p><p><a href="https://juejin.im/post/6844904167761248263" target="_blank" rel="noreferrer">《Web界面深色模式和主题化开发》</a></p><p><a href="https://juejin.im/post/6844904110601273357" target="_blank" rel="noreferrer">《手把手教你搭建一个灰度发布环境》</a></p>`,163);function r(c,d,b,u,h,g){const a=s("EditInfo");return n(),l("div",null,[o,p(a,{time:"2020年10月27日 00:12",title:"阅读 7931 ·  点赞 83 ·  评论 24 ·  收藏 99"})])}const y=e(i,[["render",r]]);export{f as __pageData,y as default};
