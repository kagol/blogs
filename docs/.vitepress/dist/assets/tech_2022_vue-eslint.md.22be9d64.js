import{_ as a,B as n,o as e,c as l,G as p,Q as o}from"./chunks/framework.1fee3549.js";const m=JSON.parse('{"title":"前端 Vuer，请给你的项目加上 ESLint","description":"","frontmatter":{},"headers":[],"relativePath":"tech/2022/vue-eslint.md","filePath":"tech/2022/vue-eslint.md"}'),t={name:"tech/2022/vue-eslint.md"},c=o(`<h1 id="前端-vuer-请给你的项目加上-eslint" tabindex="-1">前端 Vuer，请给你的项目加上 ESLint <a class="header-anchor" href="#前端-vuer-请给你的项目加上-eslint" aria-label="Permalink to &quot;前端 Vuer，请给你的项目加上 ESLint&quot;">​</a></h1><p><img src="https://user-images.githubusercontent.com/9566362/201374882-510b7641-0c33-4966-8765-d8e23cfc632c.png" alt="image"></p><h2 id="_1-eslint-是什么" tabindex="-1">1 ESLint 是什么 <a class="header-anchor" href="#_1-eslint-是什么" aria-label="Permalink to &quot;1 ESLint 是什么&quot;">​</a></h2><p>ESLint 是一个插件式的 JavaScript / JSX 代码检查工具，用于检测和修复 JavaScript 代码中的问题，目标是让代码更一致并避免错误。</p><h2 id="_2-在-vue-项目中引入-eslint" tabindex="-1">2 在 Vue 项目中引入 ESLint <a class="header-anchor" href="#_2-在-vue-项目中引入-eslint" aria-label="Permalink to &quot;2 在 Vue 项目中引入 ESLint&quot;">​</a></h2><p>使用 Vue CLI 搭建的 Vue2 项目已经自带 ESLint，就不赘述，我们看下 Vite 搭建的 Vue3 项目中怎么引入 ESLint。</p><p>使用以下命令搭建一个 Vue3 项目：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npm create vite@latest vue3-project</span></span></code></pre></div><p>创建之后，启动起来：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npm i</span></span>
<span class="line"><span style="color:#babed8;">npm run dev</span></span></code></pre></div><p>效果如下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5be6c6cf5a1542328345b64e7254b863~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="_2-1-引入-eslint" tabindex="-1">2.1 引入 ESLint <a class="header-anchor" href="#_2-1-引入-eslint" aria-label="Permalink to &quot;2.1 引入 ESLint&quot;">​</a></h3><p>执行以下命令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npm init @eslint/config</span></span></code></pre></div><p>进入交互式界面，可通过上下方向键选择，通过按回车键确定。</p><p>第一个问题是：</p><ul><li>你希望用 ESLint 来干嘛？</li><li>我们选择最全面的那个：检查语法，发现问题，并强制统一代码样式</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ npm init @eslint/config</span></span>
<span class="line"><span style="color:#babed8;">? How would you like to use ESLint? … </span></span>
<span class="line"><span style="color:#babed8;">  To check syntax only</span></span>
<span class="line"><span style="color:#babed8;">  To check syntax and find problems</span></span>
<span class="line"><span style="color:#babed8;">❯ To check syntax, find problems, and enforce code style</span></span></code></pre></div><p>第二个问题是：</p><ul><li>你的项目用的是什么模块系统？</li><li>因为是运行在浏览器端，选择 <code>ESModule</code></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">? What type of modules does your project use? … </span></span>
<span class="line"><span style="color:#babed8;">❯ JavaScript modules (import/export)</span></span>
<span class="line"><span style="color:#babed8;">  CommonJS (require/exports)</span></span>
<span class="line"><span style="color:#babed8;">  None of these</span></span></code></pre></div><p>第三个问题是：</p><ul><li>你用的什么框架？（居然没有 Angular）</li><li>选择 <code>Vue</code></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">? Which framework does your project use? … </span></span>
<span class="line"><span style="color:#babed8;">  React</span></span>
<span class="line"><span style="color:#babed8;">❯ Vue.js</span></span>
<span class="line"><span style="color:#babed8;">  None of these</span></span></code></pre></div><p>第四个问题是：</p><ul><li>你是否使用 TypeScript？</li><li>选择 <code>Yes</code></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">? Does your project use TypeScript? › No / Yes</span></span></code></pre></div><p>第五个问题是：</p><ul><li>你的代码运行在什么环境？（这个可以多选）</li><li>选择 <code>Browser</code> 浏览器环境</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">? Where does your code run? …  (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span></span>
<span class="line"><span style="color:#babed8;">✔ Browser</span></span>
<span class="line"><span style="color:#babed8;">✔ Node</span></span></code></pre></div><p>第六个问题是：</p><ul><li>你想定义怎样的代码风格？</li><li>选择使用一个流行的代码风格</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">? How would you like to define a style for your project? … </span></span>
<span class="line"><span style="color:#babed8;">❯ Use a popular style guide</span></span>
<span class="line"><span style="color:#babed8;">  Answer questions about your style</span></span></code></pre></div><p>第七个问题是：</p><ul><li>你想使用哪个样式风格？</li><li><code>Airbnb</code> 用的人比较多，就选这个吧</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">? Which style guide do you want to follow? … </span></span>
<span class="line"><span style="color:#babed8;">❯ Airbnb: https://github.com/airbnb/javascript</span></span>
<span class="line"><span style="color:#babed8;">  Standard: https://github.com/standard/standard</span></span>
<span class="line"><span style="color:#babed8;">  Google: https://github.com/google/eslint-config-google</span></span>
<span class="line"><span style="color:#babed8;">  XO: https://github.com/xojs/eslint-config-xo</span></span></code></pre></div><p>第八个问题是：</p><ul><li>配置文件用什么格式？</li><li>就选 JavaScript 吧（生成 <code>eslintrc.js</code> 文件）</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">? What format do you want your config file to be in? … </span></span>
<span class="line"><span style="color:#babed8;">❯ JavaScript</span></span>
<span class="line"><span style="color:#babed8;">  YAML</span></span>
<span class="line"><span style="color:#babed8;">  JSON</span></span></code></pre></div><p>完成！是不是超级简单！</p><p>看下我们都选了哪些配置：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">✔ How would you like to use ESLint? · style</span></span>
<span class="line"><span style="color:#babed8;">✔ What type of modules does your project use? · esm</span></span>
<span class="line"><span style="color:#babed8;">✔ Which framework does your project use? · vue</span></span>
<span class="line"><span style="color:#babed8;">✔ Does your project use TypeScript? · Yes</span></span>
<span class="line"><span style="color:#babed8;">✔ Where does your code run? · browser</span></span>
<span class="line"><span style="color:#babed8;">✔ How would you like to define a style for your project? · guide</span></span>
<span class="line"><span style="color:#babed8;">✔ Which style guide do you want to follow? · airbnb</span></span>
<span class="line"><span style="color:#babed8;">✔ What format do you want your config file to be in? · JavaScript</span></span></code></pre></div><p>主要给我们安装了以下依赖：</p><ul><li><code>eslint-config-airbnb-base@15.0.0</code></li><li><code>eslint-plugin-import@2.26.0</code></li><li><code>eslint-plugin-vue@9.2.0</code></li><li><code>eslint@8.20.0</code></li><li><code>@typescript-eslint/parser@5.30.6</code></li><li><code>@typescript-eslint/eslint-plugin@5.30.6</code></li></ul><p>并生成了一个 <code>eslintrc.cjs</code> 配置文件：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">browser</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">es2021</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">plugin:vue/vue3-essential</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">airbnb-base</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">parserOptions</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">ecmaVersion</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">latest</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">parser</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@typescript-eslint/parser</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">sourceType</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@typescript-eslint</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 自定义 rules 规则</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h3 id="_2-2-eslint-配置" tabindex="-1">2.2 ESLint 配置 <a class="header-anchor" href="#_2-2-eslint-配置" aria-label="Permalink to &quot;2.2 ESLint 配置&quot;">​</a></h3><ul><li>parser 解析器</li><li>extends 配置扩展</li><li>plugins 插件</li><li>rules 自定义规则 <a href="https://eslint.org/docs/latest/rules/" target="_blank" rel="noreferrer">https://eslint.org/docs/latest/rules/</a></li><li>eslint-disable-next-line 禁用ESLint</li></ul><h3 id="_2-3-执行-eslint-代码检查" tabindex="-1">2.3 执行 ESLint 代码检查 <a class="header-anchor" href="#_2-3-执行-eslint-代码检查" aria-label="Permalink to &quot;2.3 执行 ESLint 代码检查&quot;">​</a></h3><p>在 package.json 文件的 scripts 中配置 lint 脚本命令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#babed8;">  &quot;dev&quot;: &quot;vite&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  &quot;build&quot;: &quot;vue-tsc --noEmit &amp;&amp; vite build&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  &quot;preview&quot;: &quot;vite preview&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  </span></span>
<span class="line"><span style="color:#babed8;">  // 配置 lint 脚本命令</span></span>
<span class="line"><span style="color:#babed8;">  &quot;lint&quot;: &quot;eslint --ext .vue,.ts src/&quot;</span></span>
<span class="line"><span style="color:#babed8;">},</span></span></code></pre></div><p>执行 lint 脚本命令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npm run lint</span></span></code></pre></div><p>出现了一堆报错：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">/vue3-project/src/App.vue</span></span>
<span class="line"><span style="color:#babed8;">  4:53  error  Missing semicolon  semi</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">/vue3-project/src/components/HelloWorld.vue</span></span>
<span class="line"><span style="color:#babed8;">  2:26  error  Missing semicolon  semi</span></span>
<span class="line"><span style="color:#babed8;">  4:31  error  Missing semicolon  semi</span></span>
<span class="line"><span style="color:#babed8;">  6:21  error  Missing semicolon  semi</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">/vue3-project/src/main.ts</span></span>
<span class="line"><span style="color:#babed8;">  1:32  error  Missing semicolon  semi</span></span>
<span class="line"><span style="color:#babed8;">  2:21  error  Missing semicolon  semi</span></span>
<span class="line"><span style="color:#babed8;">  3:28  error  Missing semicolon  semi</span></span>
<span class="line"><span style="color:#babed8;">  5:29  error  Missing semicolon  semi</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">/vue3-project/src/vite-env.d.ts</span></span>
<span class="line"><span style="color:#babed8;">  4:3   error  Expected 1 empty line after import statement not followed by another import  import/newline-after-import</span></span>
<span class="line"><span style="color:#babed8;">  4:45  error  Missing semicolon                                                            semi</span></span>
<span class="line"><span style="color:#babed8;">  5:48  error  Missing semicolon                                                            semi</span></span>
<span class="line"><span style="color:#babed8;">  6:27  error  Missing semicolon                                                            semi</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">✖ 12 problems (12 errors, 0 warnings)</span></span>
<span class="line"><span style="color:#babed8;">  12 errors and 0 warnings potentially fixable with the \`--fix\` option.</span></span></code></pre></div><p>大部分都是说句尾没有分号，因为我们选择的是 Airbnb 代码规范，所以会有这个报错提示，不同的代码规范，内置的检查规则不一定完全相同。</p><h3 id="_2-4-自动修复-eslint-问题" tabindex="-1">2.4 自动修复 ESLint 问题 <a class="header-anchor" href="#_2-4-自动修复-eslint-问题" aria-label="Permalink to &quot;2.4 自动修复 ESLint 问题&quot;">​</a></h3><p>在 scripts 中增加自动修复 ESLint 问题的脚本命令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#babed8;">  &quot;dev&quot;: &quot;vite&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  &quot;build&quot;: &quot;vue-tsc --noEmit &amp;&amp; vite build&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  &quot;preview&quot;: &quot;vite preview&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  &quot;lint&quot;: &quot;eslint --ext .vue,.ts src/&quot;,</span></span>
<span class="line"><span style="color:#babed8;">  </span></span>
<span class="line"><span style="color:#babed8;">  // 自动修复 ESLint 问题脚本命令</span></span>
<span class="line"><span style="color:#babed8;">  &quot;lint:fix&quot;: &quot;eslint --ext .vue,.ts src/ --fix&quot;</span></span>
<span class="line"><span style="color:#babed8;">},</span></span></code></pre></div><p>执行：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npm run lint:fix</span></span></code></pre></div><p>执行自动修复的命令之后，所有分号都加上了，未使用的变量也自动移除了。</p><p>再次执行：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npm run lint</span></span></code></pre></div><p>没有再报错。</p><h2 id="_3-配置-husky-和-pr-门禁" tabindex="-1">3 配置 husky 和 PR 门禁 <a class="header-anchor" href="#_3-配置-husky-和-pr-门禁" aria-label="Permalink to &quot;3 配置 husky 和 PR 门禁&quot;">​</a></h2><h3 id="_3-1-配置-husky-门禁" tabindex="-1">3.1 配置 husky 门禁 <a class="header-anchor" href="#_3-1-配置-husky-门禁" aria-label="Permalink to &quot;3.1 配置 husky 门禁&quot;">​</a></h3><p>为了确保每次提交(git commit)之前代码都通过 ESLint 检查，我们增加一个 pre-commit 门禁。</p><ul><li>第一步：安装 husky 和 lint-staged</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npm i lint-staged husky -D</span></span></code></pre></div><ul><li>第二步：在 package.json 的 scripts 中增加 prepare 脚本命令</li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue-tsc --noEmit &amp;&amp; vite build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">preview</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vite preview</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">lint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint --ext .vue,.ts src/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">lint:fix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint --ext .vue,.ts src/ --fix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 在 npm install 之后自动执行，生成\`.husky\`目录。</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">prepare</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">husky install</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">,</span></span></code></pre></div><ul><li>第三步：执行 prepare 脚本</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npm run prepare</span></span></code></pre></div><p>该命令执行完会在项目根目录自动生成<code>.husky</code>目录。</p><ul><li>第四步：增加 pre-commit 钩子</li></ul><p>执行以下命令，会在<code>.husky</code>目录自动生成<code>pre-commit</code>文件钩子。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">npx husky add .husky/pre-commit &quot;npx lint-staged&quot;</span></span></code></pre></div><ul><li>第五步：增加 lint-staged 配置</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">&quot;lint-staged&quot;: {</span></span>
<span class="line"><span style="color:#babed8;">  &quot;src/**/*.{vue,ts}&quot;: &quot;eslint --fix&quot;</span></span>
<span class="line"><span style="color:#babed8;">},</span></span></code></pre></div><p>通过以上五个步骤，以后每次使用<code>git commit</code>命令提交提交代码，都会：</p><ul><li>被 pre-commit 钩子拦截</li><li>执行 npx lint-staged 命令</li><li>进而执行 eslint --fix 命令，对本次提交修改的代码涉及的文件进行代码检查，并自动修复能修复的错误，不能修复的错误会提示出来，只有所有 ESLint 错误都修复了才能提交成功</li></ul><h3 id="_3-2-配置-pr-门禁" tabindex="-1">3.2 配置 PR 门禁 <a class="header-anchor" href="#_3-2-配置-pr-门禁" aria-label="Permalink to &quot;3.2 配置 PR 门禁&quot;">​</a></h3><p>如果你在做自己的开源项目，并且非常幸运，有一群志同道合的小伙伴愿意一起参与贡献，这时为了统一大家的代码风格，让贡献者们专注于特性开发，不用担心代码格式规范问题，并通过 ESLint 工具提示贡献者，哪些代码可能带来潜在的风险，你就有必要给提交的 PR 加上 ESLint 门禁。</p><p>我们已经增加了本地的 ESLint 命令：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">lint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint --ext .vue,.ts src/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">,</span></span></code></pre></div><p>我们需要在本目录创建一个<code>.github/workflows/pull-request.yml</code>文件，在该文件中写入以下内容：</p><div class="language-yml"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Pull Request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9CAC;">on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">push</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">branches</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">dev</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">main</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">pull_request</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">branches</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">dev</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">main</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">jobs</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">runs-on</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">ubuntu-latest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">strategy</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">matrix</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">node-version</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">16.x</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ESLint</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">steps</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Checkout</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">actions/checkout@v2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Install pnpm</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">npm/action-setup@v2</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">with</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Use Node.js \${{ matrix.node-version }}</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">actions/setup-node@v2</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">with</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">          </span><span style="color:#F07178;">node-version</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">\${{ matrix.node-version }}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Install deps</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">run</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">npm i</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">ESLint</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">run</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">npm run lint</span></span></code></pre></div><p>这样只要 PR 是往 dev 或 main 分支合入的，都会跑一遍这个 Github Actions 工作流任务，ESLint 检查不通过的话，PR 的 checks 里面会提示，拦截该 PR 的合入。</p><p>PR 的提交者看到提示，也可以点到任务里面去看是哪里报错，修改掉这些 ESLint 问题，PR 就会变成绿色，项目的管理员就可以顺利合入 PR 到目标分支啦🎉</p><h2 id="_4-常见的-eslint-问题及修复案例" tabindex="-1">4 常见的 ESLint 问题及修复案例 <a class="header-anchor" href="#_4-常见的-eslint-问题及修复案例" aria-label="Permalink to &quot;4 常见的 ESLint 问题及修复案例&quot;">​</a></h2><p>接下来跟大家分享 Vue DevUI 开源 Vue3 组件库 ESLint 问题修复过程中遇到的典型问题。</p><h3 id="_4-1-案例1-warning-unexpected-any-specify-a-different-type-typescript-eslint-no-explicit-any" tabindex="-1">4.1 案例1：warning Unexpected any. Specify a different type @typescript-eslint/no-explicit-any <a class="header-anchor" href="#_4-1-案例1-warning-unexpected-any-specify-a-different-type-typescript-eslint-no-explicit-any" aria-label="Permalink to &quot;4.1 案例1：warning Unexpected any. Specify a different type @typescript-eslint/no-explicit-any&quot;">​</a></h3><p>该问题出现频率比较高，原因是有些类型写了<code>any</code>，需要明确的类型。</p><p>比如Pagination组件的单元测试文件<code>pagination.spec.ts</code>中：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const wrapper = mount({</span></span>
<span class="line"><span style="color:#babed8;">    components: {</span></span>
<span class="line"><span style="color:#babed8;">        DPagination</span></span>
<span class="line"><span style="color:#babed8;">    },</span></span>
<span class="line"><span style="color:#babed8;">    template: \`&lt;d-pagination ... /&gt;\`</span></span>
<span class="line"><span style="color:#babed8;">}, globalOption);</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">const btns = wrapper.findAll(&#39;a.devui-pagination-link&#39;);</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">expect(btns.map((ele: any) =&gt; ele.text()).join()).toEqual(&#39;&lt;,1,...,4,5,6,...,16,&gt;&#39;);</span></span></code></pre></div><p>其中的<code>ele: any</code>就属于这类问题。</p><p>解决办法是给<code>ele</code>加上明确的类型，看逻辑是<code>&lt;button&gt;</code>元素，由于是<code>@vue/test-utils</code>库的包裹元素，因此需要包一层<code>DOMWrapper</code>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">import { DOMWrapper } from &#39;@vue/test-utils&#39;;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">expect(btns.map((ele:  DOMWrapper&lt;Element&gt;) =&gt; ele.text()).join()).toEqual(&#39;&lt;,1,...,4,5,6,...,16,&gt;&#39;);</span></span></code></pre></div><h3 id="_4-2-案例2-xxx-was-used-before-it-was-defined-no-use-before-define" tabindex="-1">4.2 案例2：&#39;xxx&#39; was used before it was defined no-use-before-define <a class="header-anchor" href="#_4-2-案例2-xxx-was-used-before-it-was-defined-no-use-before-define" aria-label="Permalink to &quot;4.2 案例2：&#39;xxx&#39; was used before it was defined no-use-before-define&quot;">​</a></h3><p>这也是一个比较常见的问题，在声明之前使用变量或方法，解决办法也很简单，只需要调整下代码的顺序即可，将变量或方法的声明放在调用的语句之前。</p><p>比如Pagination组件的<code>pagination.tsx</code>中：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">// 极简模式下，可选的下拉选择页码</span></span>
<span class="line"><span style="color:#babed8;">    const litePageOptions = computed(() =&gt;  liteSelectOptions(totalPages.value));</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    // 当前页码</span></span>
<span class="line"><span style="color:#babed8;">    const cursor = computed({</span></span>
<span class="line"><span style="color:#babed8;">      get() {</span></span>
<span class="line"><span style="color:#babed8;">        // 是否需要修正错误的pageIndex</span></span>
<span class="line"><span style="color:#babed8;">        if (!props.showTruePageIndex &amp;&amp; props.pageIndex &gt; totalPages.value) {</span></span>
<span class="line"><span style="color:#babed8;">          emit(&#39;update:pageIndex&#39;, totalPages.value || 1);</span></span>
<span class="line"><span style="color:#babed8;">          return totalPages.value || 1;</span></span>
<span class="line"><span style="color:#babed8;">        }</span></span>
<span class="line"><span style="color:#babed8;">        return props.pageIndex || 1;</span></span>
<span class="line"><span style="color:#babed8;">      },</span></span>
<span class="line"><span style="color:#babed8;">      set(val: number) {</span></span>
<span class="line"><span style="color:#babed8;">        emit(&#39;update:pageIndex&#39;, val);</span></span>
<span class="line"><span style="color:#babed8;">      }</span></span>
<span class="line"><span style="color:#babed8;">    });</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    // 总页数</span></span>
<span class="line"><span style="color:#babed8;">    const totalPages = computed(() =&gt; Math.ceil(props.total / props.pageSize));</span></span></code></pre></div><p>其中的<code>totalPages</code>的声明在比较靠后的位置，但是却在声明之前在<code>litePageOptions</code>和<code>cursor</code>变量中都使用了<code>totalPages</code>，所以提示 ESLint 问题。</p><p>解决的方法就是将<code>totalPages</code>的声明放在<code>litePageOptions</code>和<code>cursor</code>之前。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">// 总页数</span></span>
<span class="line"><span style="color:#babed8;">    const totalPages = computed(() =&gt; Math.ceil(props.total / props.pageSize));</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    // 极简模式下，可选的下拉选择页码</span></span>
<span class="line"><span style="color:#babed8;">    const litePageOptions = computed(() =&gt;  liteSelectOptions(totalPages.value));</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    // 当前页码</span></span>
<span class="line"><span style="color:#babed8;">    const cursor = computed({ ... });</span></span></code></pre></div><h3 id="_4-3-案例3-warning-missing-return-type-on-function-typescript-eslint-explicit-module-boundary-types" tabindex="-1">4.3 案例3：warning Missing return type on function @typescript-eslint/explicit-module-boundary-types <a class="header-anchor" href="#_4-3-案例3-warning-missing-return-type-on-function-typescript-eslint-explicit-module-boundary-types" aria-label="Permalink to &quot;4.3 案例3：warning Missing return type on function @typescript-eslint/explicit-module-boundary-types&quot;">​</a></h3><p>该问题是因为函数缺少返回类型，比如Fullscreen组件<code>utils.ts</code>文件的<code>launchImmersiveFullScreen</code>方法中：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">export const launchImmersiveFullScreen = async (docElement: any) =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">  let fullscreenLaunch = null;</span></span>
<span class="line"><span style="color:#babed8;">  if (docElement.requestFullscreen) {</span></span>
<span class="line"><span style="color:#babed8;">    fullscreenLaunch = docElement.requestFullscreen();</span></span>
<span class="line"><span style="color:#babed8;">  } else if (docElement.mozRequestFullScreen) {</span></span>
<span class="line"><span style="color:#babed8;">    fullscreenLaunch = docElement.mozRequestFullScreen();</span></span>
<span class="line"><span style="color:#babed8;">  } else if (docElement.webkitRequestFullScreen) {</span></span>
<span class="line"><span style="color:#babed8;">    fullscreenLaunch = Promise.resolve(docElement.webkitRequestFullScreen());</span></span>
<span class="line"><span style="color:#babed8;">  } else if (docElement.msRequestFullscreen) {</span></span>
<span class="line"><span style="color:#babed8;">    fullscreenLaunch = Promise.resolve(docElement.msRequestFullscreen());</span></span>
<span class="line"><span style="color:#babed8;">  }</span></span>
<span class="line"><span style="color:#babed8;">  return await fullscreenLaunch.then(() =&gt; !!document.fullscreenElement);</span></span>
<span class="line"><span style="color:#babed8;">};</span></span></code></pre></div><p>先看下<code>launchImmersiveFullScreen</code>方法的参数问题，<code>docElement</code>用了<code>any</code>，也缺失了返回类型，<code>docElement</code>其实就是<code>document</code>对象，可以使用<code>HTMLElement</code>类型，但是<code>launchImmersiveFullScreen</code>这个方法是用来启动沉浸式全屏的，为了实现浏览器兼容，比如使用了<code>docElement.mozRequestFullScreen</code>兼容火狐，而这些方法在HTMLElement中是没有的，会报TS类型错误，所以需要做一些改造。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">interface CompatibleHTMLElement extends HTMLElement {</span></span>
<span class="line"><span style="color:#babed8;">  mozRequestFullScreen?: () =&gt; void;</span></span>
<span class="line"><span style="color:#babed8;">  webkitRequestFullScreen?: () =&gt; void;</span></span>
<span class="line"><span style="color:#babed8;">  msRequestFullscreen?: () =&gt; void;</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><p>这里定义了一个<code>CompatibleHTMLElement</code>的类型，继承了<code>HTMLElement</code>，并增加了一些自定义的方法。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">export const launchImmersiveFullScreen = async (docElement: CompatibleHTMLElement) =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">  ...</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><p>再来看下<code>launchImmersiveFullScreen</code>方法的返回类型问题。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">return await fullscreenLaunch.then(() =&gt; !!document.fullscreenElement);</span></span></code></pre></div><p>该方法返回了一个<code>Promise</code>对象，它的类型是一个泛型，我们需要传入具体的类型：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">export const launchImmersiveFullScreen = async (docElement: CompatibleHTMLElement): Promise&lt;boolean&gt; =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">  ...</span></span>
<span class="line"><span style="color:#babed8;">  return await fullscreenLaunch.then(() =&gt; !!document.fullscreenElement);</span></span>
<span class="line"><span style="color:#babed8;">};</span></span></code></pre></div><h3 id="_4-4-案例4-xxx-is-already-declared-in-the-upper-scope-typescript-eslint-no-shadow" tabindex="-1">4.4 案例4：&#39;xxx&#39; is already declared in the upper scope @typescript-eslint/no-shadow <a class="header-anchor" href="#_4-4-案例4-xxx-is-already-declared-in-the-upper-scope-typescript-eslint-no-shadow" aria-label="Permalink to &quot;4.4 案例4：&#39;xxx&#39; is already declared in the upper scope @typescript-eslint/no-shadow&quot;">​</a></h3><p>这个问题是由于嵌套的作用域中定义了相同的变量名，比如Tree组件的<code>use-checked.ts</code>文件中：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">export default function useChecked(...) {</span></span>
<span class="line"><span style="color:#babed8;">  const onNodeClick = (item: TreeItem) =&gt; {</span></span>
<span class="line"><span style="color:#babed8;">    // 这里定义了 id 变量</span></span>
<span class="line"><span style="color:#babed8;">    const { id } = item;</span></span>
<span class="line"><span style="color:#babed8;">    ...</span></span>
<span class="line"><span style="color:#babed8;">    filter 里面又定义了一个 id 参数</span></span>
<span class="line"><span style="color:#babed8;">    const currentSelectedItem = flatData.filter(({ id }) =&gt; currentSelected[id] &amp;&amp; currentSelected[id] !== &#39;none&#39;);</span></span>
<span class="line"><span style="color:#babed8;">    ...</span></span>
<span class="line"><span style="color:#babed8;">  }</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><p>修改方式就是将其中一个 id 的名字改了，比如把里面的 id 改成 itemId：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">const currentSelectedItem = flatData.filter(({ id: itemId }) =&gt; currentSelected[itemId] &amp;&amp; currentSelected[itemId] !== &#39;none&#39;);</span></span></code></pre></div><p>欢迎在评论区分享你在项目中遇到的 <code>ESLint</code> 问题👏👏</p>`,124);function i(r,d,y,u,b,D){const s=n("EditInfo");return e(),l("div",null,[c,p(s,{time:"2022年07月20日 07:58",title:"阅读 3974 ·  点赞 80 ·  评论 31 ·  收藏 99"})])}const g=a(t,[["render",i]]);export{m as __pageData,g as default};
