import{_ as a,B as n,o as e,c as p,G as l,Q as t}from"./chunks/framework.1fee3549.js";const m=JSON.parse('{"title":"Nginx配置HTTPS","description":"","frontmatter":{},"headers":[],"relativePath":"tech/2018/nginx-https.md","filePath":"tech/2018/nginx-https.md"}'),o={name:"tech/2018/nginx-https.md"},c=t(`<h1 id="nginx配置https" tabindex="-1">Nginx配置HTTPS <a class="header-anchor" href="#nginx配置https" aria-label="Permalink to &quot;Nginx配置HTTPS&quot;">​</a></h1><h2 id="_1-nginx配置http" tabindex="-1">1 Nginx配置HTTP <a class="header-anchor" href="#_1-nginx配置http" aria-label="Permalink to &quot;1 Nginx配置HTTP&quot;">​</a></h2><p>在服务器端，用Nginx配置一个静态文件很容易，只需要在nginx.conf文件中加上：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">server {</span></span>
<span class="line"><span style="color:#babed8;">    listen ip:80;</span></span>
<span class="line"><span style="color:#babed8;">    server_name XX.XX.com;</span></span>
<span class="line"><span style="color:#babed8;">    server_name_in_redirect off;</span></span>
<span class="line"><span style="color:#babed8;">    charset UTF-8;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    location / {</span></span>
<span class="line"><span style="color:#babed8;">        root /data/apache_htdocs/apply/;</span></span>
<span class="line"><span style="color:#babed8;">        index index.html index.htm;</span></span>
<span class="line"><span style="color:#babed8;">        expires 1d;</span></span>
<span class="line"><span style="color:#babed8;">    }</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><h2 id="_2-获取https证书" tabindex="-1">2 获取HTTPS证书 <a class="header-anchor" href="#_2-获取https证书" aria-label="Permalink to &quot;2 获取HTTPS证书&quot;">​</a></h2><p>1.生成密钥key(server.key)</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ openssl genrsa -des3 -out server.key 2048</span></span></code></pre></div><p>以上命令会生成一个server.key文件</p><p>使用以下命令可以跳过输入密码的步骤：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ openssl rsa -in server.key -out server.key</span></span></code></pre></div><p>2.创建服务器证书的申请文件(server.csr)</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ openssl req -new -key server.key -out server.csr</span></span></code></pre></div><p>其中Country Name填CN，Common Name填主机名（<a href="https://XX.XX.com/" target="_blank" rel="noreferrer">https://XX.XX.com/</a>...，这里的主机名为XX.XX.com），其他都可不填。</p><p>3.创建CA证书(ca.crt/ca.srl)</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ openssl req -new -x509 -key server.key -out ca.crt -days 3650</span></span></code></pre></div><p>这个证书用来给自己的服务器证书签名</p><p>4.创建服务器证书(server.crt) $ openssl x509 -req -days 3650 -in server.csr -CA ca.crt -CAkey server.key -CAcreateserial -out server.crt 经过以上步骤，一共生成了5个文件：</p><p>ca.crt ca.srl server.crt server.csr server.key 其中server.crt和server.key就是Nginx需要的证书文件</p><h2 id="_3-配置nginx" tabindex="-1">3 配置Nginx <a class="header-anchor" href="#_3-配置nginx" aria-label="Permalink to &quot;3 配置Nginx&quot;">​</a></h2><p>Nignx配置文件nginx.conf中加入：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">server {</span></span>
<span class="line"><span style="color:#babed8;">    listen       ip:443 ssl;</span></span>
<span class="line"><span style="color:#babed8;">    server_name  XX.XX.com;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    ssl_certificate      /data/XX/keys/server.crt;</span></span>
<span class="line"><span style="color:#babed8;">    ssl_certificate_key  /data/XX/keys/server.key;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    ssl_session_cache    shared:SSL:1m;</span></span>
<span class="line"><span style="color:#babed8;">    ssl_session_timeout  5m;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span>
<span class="line"><span style="color:#babed8;">    ssl_prefer_server_ciphers  on;</span></span>
<span class="line"><span style="color:#babed8;"></span></span>
<span class="line"><span style="color:#babed8;">    location / {</span></span>
<span class="line"><span style="color:#babed8;">        root   /data/apache_htdocs/admin/;</span></span>
<span class="line"><span style="color:#babed8;">        index  index.html index.htm;</span></span>
<span class="line"><span style="color:#babed8;">        expires 1d;</span></span>
<span class="line"><span style="color:#babed8;">    }</span></span>
<span class="line"><span style="color:#babed8;">}</span></span></code></pre></div><p>配置好之后运行 nginx -t 检查配置是否有语法错误</p><p>没问题的话运行 nginx -s reload 重新加载配置文件</p><p>运行 netstat -lntp 可以查看新增了一个443端口的nginx服务：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">tcp        0      0 ip:443            0.0.0.0:*                   LISTEN      pid/nginx</span></span></code></pre></div><h2 id="_4-遇到的问题及解决方案" tabindex="-1">4 遇到的问题及解决方案 <a class="header-anchor" href="#_4-遇到的问题及解决方案" aria-label="Permalink to &quot;4 遇到的问题及解决方案&quot;">​</a></h2><p>1.问题一：缺少ngx_http_ssl_module模块 nginx -t 时报错如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">nginx: [emerg] the &quot;ssl&quot; parameter requires ngx_http_ssl_module</span></span></code></pre></div><p>解决方案：</p><p>利用Nginx源码编译一个带ngx_http_ssl_module模块的nginx，替换掉现有的nginx，具体步骤如下</p><p>（1）查看现在的nginx编译参数</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ /usr/local/nginx/sbin/nginx -V</span></span>
<span class="line"><span style="color:#babed8;">nginx version: nginx/1.8.0</span></span>
<span class="line"><span style="color:#babed8;">built by gcc 4.4.6 20110731 (Red Hat 4.4.6-4) (GCC)</span></span>
<span class="line"><span style="color:#babed8;">built with OpenSSL 1.0.1m 19 Mar 2015</span></span>
<span class="line"><span style="color:#babed8;">TLS SNI support enabled</span></span>
<span class="line"><span style="color:#babed8;">configure arguments: --prefix=/usr/local/nginx --with-pcre=/usr/local/pcre-8.10</span></span></code></pre></div><p>（2）利用源码重新编译nginx</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ cd /usr/local/nginx-1.8.0</span></span>
<span class="line"><span style="color:#babed8;">$ ./configure --prefix=/usr/local/nginx --with-pcre=/usr/local/pcre-8.10 --with-http_ssl_module</span></span></code></pre></div><p>其中--with-http_ssl_module是新加的参数</p><p>配置完运行make进行编译，注意不需要运行make install命令</p><p>（3）将新编译生成的nginx替换现有的nginx</p><p>覆盖之前先备份现有的nginx：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</span></span></code></pre></div><p>停止nginx服务：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ /usr/local/nginx/sbin/nginx -s stop</span></span></code></pre></div><p>替换现有的nginx：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ cp ./objs/nginx /usr/local/nginx/sbin/</span></span></code></pre></div><p>启动nginx：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ /usr/local/nginx/sbin/nginx</span></span></code></pre></div><p>2.问题二：缺少OPENSSL或PCRE模块 ./configure或make Nginx时报错：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">./configure: error: the HTTP rewrite module requires the PCRE library.</span></span></code></pre></div><p>解决方案：</p><p>源码安装openssl和pcre</p><p>源码下载地址</p><p>openssl: <a href="https://www.openssl.org/%EF%BC%88%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%EF%BC%9Ahttps://www.openssl.org/source/openssl-1.1.1.tar.gz%EF%BC%89" target="_blank" rel="noreferrer">https://www.openssl.org/（直接下载：https://www.openssl.org/source/openssl-1.1.1.tar.gz）</a></p><p>pcre: <a href="https://www.pcre.org/%EF%BC%88%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%EF%BC%9Aftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/%EF%BC%89" target="_blank" rel="noreferrer">https://www.pcre.org/（直接下载：ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/）</a></p><p>源码安装：</p><p>（1）解压</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ tar zxvf pcre-8.42.tar.gz</span></span>
<span class="line"><span style="color:#babed8;">$ cd pcre-8.42</span></span></code></pre></div><p>（2）配置</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ ./configure --prefix=/usr/local/pcre</span></span></code></pre></div><p>（3）编译</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ make</span></span></code></pre></div><p>（4）安装</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">$ make install</span></span></code></pre></div><p>编译和安装可以合成一步：make &amp;&amp; make install</p><p>openssl的安装同理</p>`,63);function i(r,d,b,g,h,y){const s=n("EditInfo");return e(),p("div",null,[c,l(s,{time:"2018-09-12 15:54",title:"阅读(314) 评论(0) 推荐(0)"})])}const x=a(o,[["render",i]]);export{m as __pageData,x as default};
